{"version":3,"file":"munkres.min.cjs","sources":["../../src/utils/array.ts","../../src/utils/matrix.ts","../../src/utils/costMatrix.ts","../../src/utils/munkres.ts","../../src/munkres.ts"],"sourcesContent":["/**\n * Find the minimum value in a given array.\n *\n * @param array - An array of numbers.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n *\n * @example\n * const array = [3, 1, 2];\n * console.log(getMin(array)); // Output: 1\n *\n * @example\n * const array = [3n, 1n, 2n];\n * console.log(getMin(array)); // Output: 1n\n *\n * @example\n * const array = ['d', 'b', 'c'];\n * console.log(getMin(array)); // Output: 'b'\n */\nexport function getMin(array: number[]): number | undefined;\nexport function getMin(array: bigint[]): bigint | undefined;\nexport function getMin(array: string[]): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","import { Matrix } from \"../types/matrix\";\n\n/**\n * Creates a copy of a given matrix.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the input matrix.\n */\nexport function copy<T>(matrix: Matrix<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    dupe[y] = Array.from(matrix[y]);\n  }\n  return dupe;\n}\n\n/**\n * Finds the minimum value in a given column of a matrix.\n *\n * If the matrix is empty, the column is out of bounds, or\n * the function otherwise cannot determine a minimum value,\n * then `undefined` is returned.\n *\n * @param matrix - The matrix to search.\n * @param col - The zero-based column index for the matrix.\n *\n * @returns The minimum value in the given matrix column,\n * or `undefined` if a minimum could not be found.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getColMin(matrix, 1)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getColMin(matrix, 2)); // Output: 2n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getColMin(matrix, 0)); // Output: 'b'\n */\nexport function getColMin(\n  matrix: Matrix<number>,\n  col: number\n): number | undefined;\nexport function getColMin(\n  matrix: Matrix<bigint>,\n  col: number\n): bigint | undefined;\nexport function getColMin(\n  matrix: Matrix<string>,\n  col: number\n): string | undefined;\nexport function getColMin<T extends number | bigint | string>(\n  matrix: Matrix<T>,\n  x: number\n): T | undefined {\n  const Y = matrix.length;\n  if (Y <= 0 || x < 0 || x >= matrix[0].length) {\n    return undefined;\n  }\n\n  let min = matrix[0][x];\n  for (let y = 1; y < Y; ++y) {\n    if (min > matrix[y][x]) {\n      min = matrix[y][x];\n    }\n  }\n\n  return min;\n}\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMax(matrix)); // Output: 8\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMax(matrix)); // Output: 8n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMax(matrix)); // Output: 'i'\n */\nexport function getMax(matrix: Matrix<number>): number | undefined;\nexport function getMax(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMax(matrix: Matrix<string>): string | undefined;\nexport function getMax<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMin(matrix)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMin(matrix)); // Output: 0n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMin(matrix)); // Output: 'a'\n */\nexport function getMin(matrix: Matrix<number>): number | undefined;\nexport function getMin(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMin(matrix: Matrix<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Checks if a given matrix is square. A square matrix has an equal number\n * of rows and columns.\n *\n * @param matrix - The matrix to check.\n *\n * @returns `true` if the matrix is square, `false` otherwise.\n *\n * @example\n * console.log(isSquare([\n *   [1, 2],\n *   [3, 4]\n * ])); // Output: true\n *\n * @example\n * console.log(isSquare([\n *    [1, 2, 3],\n *    [4, 5, 6]\n * ])); // Output: false\n */\nexport function isSquare(matrix: Matrix<unknown>): boolean {\n  return matrix.length == (matrix[0]?.length ?? 0);\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn - A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(map(matrix, v =\\> v * v));\n * // Output: [\n * //   [ 1,  9,  4],\n * //   [16,  0, 36],\n * //   [49, 25, 64]\n * // ]\n */\nexport function map<A, B>(\n  matrix: Matrix<A>,\n  callbackFn: (value: A, y: number, x: number, matrix: Matrix<A>) => B\n): Matrix<B> {\n  const Y = matrix.length;\n  const out: Matrix<B> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n\n/**\n * Pads a matrix to a specified size with a given fill value.\n *\n * The padding is applied from the ends (right) of each row and\n * the ends (bottom) of each column. If a dimension is already\n * at or above the desired value, no change is made to it.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value used for padding.\n */\nexport function pad<T>(\n  matrix: Matrix<T>,\n  height: number,\n  width: number,\n  fillValue: T\n): void {\n  padHeight(matrix, height, fillValue);\n  padWidth(matrix, width, fillValue);\n}\n\n/**\n * Pads the height (number of rows) of a matrix with a given fill value.\n *\n * Rows are added to the end (bottom) of the matrix until its height reaches\n * `height`, with each new row filled with `fillValue`. If the matrix is\n * already at or above `height`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param fillValue - The value to use for filling new rows.\n */\nexport function padHeight<T>(\n  matrix: Matrix<T>,\n  height: number,\n  fillValue: T\n): void {\n  const Y = matrix.length;\n  if (Y >= height) {\n    return;\n  }\n\n  matrix.length = height;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = Y; y < height; ++y) {\n    matrix[y] = new Array<T>(X).fill(fillValue);\n  }\n}\n\n/**\n * Pads the width (number of columns) of a matrix with a given fill value.\n *\n * Columns are added to the right of the matrix until its width reaches\n * `width`, with each new column filled with `fillValue`. If the matrix is\n * already at or above `width`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value to use for filling new columns.\n */\nexport function padWidth<T>(\n  matrix: Matrix<T>,\n  width: number,\n  fillValue: T\n): void {\n  const X = matrix[0]?.length ?? 0;\n  if (X >= width) {\n    return;\n  }\n\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].length = width;\n    matrix[y].fill(fillValue, X, width);\n  }\n}\n","import { CostFn } from \"../types/costFn\";\nimport { CostMatrix } from \"../types/costMatrix\";\nimport { getMin as getArrayMin } from \"./array\";\nimport { getColMin } from \"./matrix\";\n\n/**\n * Constructs a cost matrix for a set of\n * workers and jobs using a provided cost function.\n *\n * Each element of the matrix represents the cost associated with assigning a\n * specific worker to a specific job. The cost is determined by `costFn`,\n * which computes the cost based on a worker-job pair.\n *\n * @param workers - An array of workers.\n * @param jobs - An array of jobs.\n * @param costFn - Given a worker and a job, returns the\n * numeric cost of assigning that worker to that job.\n *\n * @returns A {@link CostMatrix} where the values at position `[y][x]`\n * represent the cost of assigning the `y`-th worker to the `x`-th job.\n *\n * @example\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) => worker.length + job.length;\n *\n * // Create the cost matrix\n * const matrix = createCostMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n */\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: CostFn<W, J>\n): CostMatrix {\n  const X = jobs.length;\n  const Y = workers.length;\n  const mat = new Array<number[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<number>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = costFn(workers[y], jobs[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMaxCost(costMatrix: CostMatrix): number | undefined {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = costMatrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = costMatrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMinCost(costMatrix: CostMatrix): number | undefined {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = costMatrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = costMatrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Inverts the values in a given cost matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be inverted. The matrix is modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const costMatrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const anotherMatrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertCostMatrix(anotherMatrix, 50);\n *\n * // costMatrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertCostMatrix(\n  costMatrix: CostMatrix,\n  bigVal?: number\n): void {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? getMaxCost(costMatrix)!;\n  for (let y = 0; y < Y; ++y) {\n    const row = costMatrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = bigVal - row[x];\n    }\n  }\n}\n\n/**\n * Negates the values in a given cost matrix.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be negated. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the cost matrix\n * negateCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateCostMatrix(costMatrix: CostMatrix): void {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = costMatrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x];\n    }\n  }\n}\n\n/**\n * Performs column-wise reduction on a given cost matrix.\n *\n * Each column of the matrix is reduced by subtracting the minimum value\n * in the column from every value in the column.\n *\n * @param costMatrix - The cost matrix. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * // Perform reduction\n * reduceCols(costMatrix);\n *\n * // costMatrix now:\n * // [\n * //   [2, 1, 1],\n * //   [0, 0, 3],\n * //   [1, 2, 0]\n * // ]\n */\nexport function reduceCols(costMatrix: CostMatrix): void {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n\n  for (let x = 0; x < X; ++x) {\n    const min = getColMin(costMatrix, x)!;\n    if (isFinite(min)) {\n      for (let y = 0; y < Y; ++y) {\n        costMatrix[y][x] -= min;\n      }\n    } else {\n      for (let y = 0; y < Y; ++y) {\n        costMatrix[y][x] = costMatrix[y][x] == min ? 0 : Infinity;\n      }\n    }\n  }\n}\n\n/**\n * Performs row-wise reduction on a given cost matrix.\n *\n * Each row of the matrix is reduced by subtracting the minimum value\n * in the row from every value in the row.\n *\n * @param costMatrix - The cost matrix. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * // Perform reduction\n * reduceRows(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [3, 0, 2],\n * //   [2, 0, 5],\n * //   [1, 0, 0]\n * // ]\n */\nexport function reduceRows(costMatrix: CostMatrix): void {\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n\n  for (let y = 0; y < Y; ++y) {\n    const row = costMatrix[y];\n    const min = getArrayMin(row)!;\n    if (isFinite(min)) {\n      for (let x = 0; x < X; ++x) {\n        row[x] -= min;\n      }\n    } else {\n      for (let x = 0; x < X; ++x) {\n        row[x] = row[x] == min ? 0 : Infinity;\n      }\n    }\n  }\n}\n","import { Matrix } from \"..\";\nimport { CostMatrix } from \"../types/costMatrix\";\nimport { reduceCols, reduceRows } from \"./costMatrix\";\nimport { isSquare, map } from \"./matrix\";\n\n/**\n * Displays the current step of the algorithm and the state of the cost matrix.\n *\n * @param step - The current step of the algorithm.\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n */ /*\nexport function debug(\n  step: string,\n  mat: CostMatrix,\n  primeY: number[],\n  starY: number[]\n): void {\n  console.log(\"%s:\\n\\n%s\\n\", step, toString(mat, starY, primeY));\n}\n*/\n\n/**\n * Searches for an uncovered zero in the matrix and returns its coordinates.\n * If not found, the coordinates of the smallest uncovered value are returned\n * instead.\n *\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @returns The coordinates of an uncovered zero, if found.\n * Otherwise, the coordinates to the smallest uncovered value.\n */\nexport function findUncoveredZeroOrMin(\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): [number, number] {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  let minX = -1;\n  let minY = -1;\n  let minV = undefined as unknown as number;\n\n  for (let y = 0; y < Y; ++y) {\n    if (primeY[y] >= 0) {\n      continue;\n    }\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        continue;\n      }\n      if (vals[x] == 0) {\n        return [y, x];\n      }\n      if (!(minV <= vals[x])) {\n        minV = vals[x];\n        minX = x;\n        minY = y;\n      }\n    }\n  }\n\n  return [minY, minX];\n}\n\n/**\n * Reduces the given cost matrix by performing row-wise and column-wise\n * reductions.\n *\n * This is a preprocessing step to simplify the matrix\n * and improve the efficiency of subsequent steps.\n *\n * @param mat - The cost matrix. Modified in place.\n */\nexport function step1(mat: CostMatrix): void {\n  reduceRows(mat);\n  reduceCols(mat);\n}\n\n/**\n * Performs the initial steps of searching for zeros in the cost matrix to\n * \"star\", then returns the number of stars made.\n *\n * A star indicates a potential part of the optimal solution. Each star is\n * the only one in its row and column.\n *\n * @param mat - The cost matrix.\n * @param starX - An array tracking the star status of columns.\n * @param starY - An array tracking the star status of rows.\n *\n * @returns The number of stars made.\n */\nexport function steps2To3(\n  mat: CostMatrix,\n  starX: number[],\n  starY: number[]\n): number {\n  const X = starX.length;\n  const Y = starY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (vals[x] == 0 && starX[x] < 0) {\n        starX[x] = y;\n        starY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Find and augment assignments until an optimal set is found.\n *\n * It attempts to either find an uncovered zero to star or adjusts\n * the matrix to create more zeros if none found. If an uncovered zero is\n * found but cannot be starred due to conflicts (i.e., another star in the\n * same row or column), it primes the zero and possibly adjusts existing\n * stars to resolve the conflict, thereby augmenting the current set of\n * assignments. This process is repeated until there are as many stars as\n * there are columns in the matrix, at which point optimal assignments\n * have been found.\n *\n * @param mat - An NxN cost matrix. Modified in place.\n *\n * @privateRemarks\n * Based on {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | this outline} and enhanced with custom optimizations.\n */\nexport function step4(mat: CostMatrix): number[] {\n  // Check input\n  if (!isSquare(mat)) {\n    throw new Error(\"matrix must be NxN\");\n  }\n\n  const starX = new Array<number>(mat[0]?.length ?? 0).fill(-1);\n  const starY = new Array<number>(mat.length).fill(-1);\n  const primeY = new Array<number>(mat.length).fill(-1);\n\n  // Step 1: Reduce\n  step1(mat);\n\n  // Steps 2 & 3: Find initial stars\n  let stars = steps2To3(mat, starX, starY);\n\n  // Step 4: Find optimal assignments\n  const S = Math.min(starX.length, starY.length);\n  while (stars < S) {\n    // Find an uncovered zero or the uncovered min\n    const [y, x] = findUncoveredZeroOrMin(mat, primeY, starX);\n\n    // Step 6: If no zero found, create a zero(s) from the min\n    if (mat[y][x] != 0) {\n      step6(mat[y][x], mat, primeY, starX);\n    }\n\n    // Prime the zero / cover the row\n    primeY[y] = x;\n\n    // Step 5: If no star in the prime's row, turn primes into stars\n    if (starY[y] < 0) {\n      step5(y, primeY, starX, starY);\n      ++stars;\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starY;\n}\n\n/**\n * Given a prime, walks an alternating path to a star in the prime's column\n * and then a prime in the star's row, starring each prime and removing each\n * star along the way. The path continues until a star cannot be found.\n *\n * This step effectively increases the number of independent zeros (stars)\n * in the matrix, bringing the algorithm closer to an optimal assignment.\n *\n * @param y - The starting prime's y coordinate.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n */\nexport function step5(\n  y: number,\n  primeY: number[],\n  starX: number[],\n  starY: number[]\n): void {\n  // Sanity check\n  if (primeY[y] < 0) {\n    throw new Error(\"Input must be prime.\");\n  }\n\n  let sy = y;\n  while (sy >= 0) {\n    // Go to the next prime\n    const x = primeY[sy];\n    y = sy;\n    sy = starX[x];\n\n    // Mark prime as a star\n    primeY[y] = -1;\n    starX[x] = y;\n    starY[y] = x;\n  }\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros.\n *\n * The matrix is modified by adding a given value to every element of covered\n * rows, and subtracting `Infinity` from every element of uncovered columns.\n * If an element's row is covered and column is uncovered, no change is made.\n *\n * @param min - The value to adjust the matrix by.\n * Should be the minimum uncovered value (see {@link step4}).\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n */\nexport function step6(\n  min: number,\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  if (!isFinite(min)) {\n    return step6Inf(mat, primeY, starX);\n  }\n\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          vals[x] += min;\n        }\n      } else if (primeY[y] < 0) {\n        vals[x] -= min;\n      }\n    }\n  }\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros, specifically\n * when adjusting by Infinity.\n *\n * The matrix is modified by adding `Infinity` to every element of covered\n * rows, and subtracting `Infinity` from every element of uncovered columns.\n * If an element's row is covered and column is uncovered, no change is made.\n *\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @remarks\n *\n * This variation of step 6 is used when the minimum uncovered value\n * (see {@link step4}) is `Infinity`, as normal subtraction of `Infinity`\n * from `Infinity` equals `NaN`.\n */\nexport function step6Inf(\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          vals[x] += Infinity;\n        }\n      } else if (primeY[y] < 0) {\n        vals[x] = 0;\n      }\n    }\n  }\n}\n\n/**\n * Generates a string representation of the cost matrix,\n * annotating starred (*) and primed (\") elements.\n *\n * Stars (*) indicate part of a potential solution, while primes (\") mark\n * elements considered for augmenting the current solution. This visualization\n * aids in understanding and debugging the matrix's state at various steps of\n * the algorithm.\n *\n * @param mat - The cost matrix.\n * @param starY - An array of star y coordinates to x coordinates.\n * @param primeY - (Optional) An array of prime y coordinates to x coordinates.\n *\n * @returns A string visualization of the matrix with stars and primes.\n */\nexport function toString(\n  mat: CostMatrix,\n  starY: number[],\n  primeY: number[] = []\n): string {\n  const strs: Matrix<string> = map(mat, v => `${v}`);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // Mark values as stars or primes\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    if (starY[y] >= 0) {\n      row[starY[y]] = \"*\" + row[starY[y]];\n    }\n    if (primeY[y] >= 0) {\n      row[primeY[y]] = '\"' + row[primeY[y]];\n    }\n  }\n\n  // Get column width\n  let width = 0;\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      width = Math.max(width, strs[y][x].length);\n    }\n  }\n\n  // Adjust widths\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    for (let x = 0; x < X; ++x) {\n      if (row[x].length < width) {\n        row[x] = row[x].padStart(width, \" \");\n      }\n    }\n  }\n\n  /*\n\n  // Create starX\n  const starX: number[] = new Array(X).fill(-1);\n  for (let y = 0; y < Y; ++y) {\n    if (starY[y] >= 0) {\n      starX[starY[y]] = y;\n    }\n  }\n  \n  // Mark values as covered\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          strs[y][x] = `⫢${strs[y][x]}⫤`;\n        } else {\n          strs[y][x] = `|${strs[y][x]}|`;\n        }\n      } else if (primeY[y] >= 0) {\n        strs[y][x] = `=${strs[y][x]}=`;\n      } else {\n        strs[y][x] = ` ${strs[y][x]} `;\n      }\n    }\n  }\n  */\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n  return buf.join(\",\\n\");\n}\n","import { CostMatrix } from \"./types/costMatrix\";\nimport { copy, pad } from \"./utils/matrix\";\nimport { step4 } from \"./utils/munkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n *\n * @remarks\n * Runs the {@link https://en.wikipedia.org/wiki/Hungarian_algorithm | Munkres algorithm (aka Hungarian algorithm)} to solve\n * the {@link https://en.wikipedia.org/wiki/Assignment_problem | assignment problem}.\n */\nexport function munkres(costMatrix: CostMatrix): [number, number][] {\n  // Get dimensions\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n\n  // If matrix is empty\n  if (X <= 0) {\n    return [];\n  }\n\n  // Make a copy of the cost matrix\n  costMatrix = copy(costMatrix);\n\n  // Square the matrix with dummy rows / columns\n  pad(costMatrix, X, Y, 0);\n\n  // Get optimal assignments\n  const y2x = step4(costMatrix);\n\n  // Filter out dummy assignments\n  const pairs: [number, number][] = new Array(Math.min(Y, X));\n  for (let y = 0, i = 0; y < Y; ++y) {\n    if (y2x[y] < X) {\n      pairs[i++] = [y, y2x[y]];\n    }\n  }\n\n  // Return assignments\n  return pairs;\n}\n"],"names":["getMin","array","N","min","i","copy","matrix","Y","dupe","y","getColMin","x","isSquare","_a","pad","height","width","fillValue","padHeight","padWidth","X","createCostMatrix","workers","jobs","costFn","mat","row","getMaxCost","costMatrix","max","getMinCost","invertCostMatrix","bigVal","negateCostMatrix","reduceCols","reduceRows","getArrayMin","findUncoveredZeroOrMin","primeY","starX","minX","minY","minV","vals","step1","steps2To3","starY","stars","step4","S","step6","step5","sy","step6Inf","munkres","y2x","pairs"],"mappings":"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"}