{"version":3,"file":"munkres.min.cjs","sources":["../../src/utils/array.ts","../../src/utils/matrix.ts","../../src/utils/costMatrix.ts","../../src/utils/munkres.ts","../../src/munkres.ts"],"sourcesContent":["/**\n * Find the minimum value in a given array.\n *\n * @param array - An array of numbers.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n */\nexport function getMin(array: number[]): number | undefined;\nexport function getMin(array: bigint[]): bigint | undefined;\nexport function getMin(array: string[]): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","import { Matrix } from \"../types/matrix\";\n\n/**\n * Creates a copy of a given matrix.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the input matrix.\n */\nexport function copy<T>(matrix: Matrix<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    dupe[y] = Array.from(matrix[y]);\n  }\n  return dupe;\n}\n\n/**\n * Finds the minimum value in a given column of a matrix.\n *\n * If the matrix is empty, the column is out of bounds, or\n * the function otherwise cannot determine a minimum value,\n * then `undefined` is returned.\n *\n * @param matrix - The matrix to search.\n * @param col - The zero-based column index for the matrix.\n *\n * @returns The minimum value in the given matrix column,\n * or `undefined` if a minimum could not be found.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getColMin(matrix, 1)); // Output: 0\n */\nexport function getColMin(\n  matrix: Matrix<number>,\n  col: number\n): number | undefined;\n/**\n * Finds the minimum value in a given column of a matrix.\n *\n * If the matrix is empty, the column is out of bounds, or\n * the function otherwise cannot determine a minimum value,\n * then `undefined` is returned.\n *\n * @param matrix - The matrix to search.\n * @param col - The zero-based column index for the matrix.\n *\n * @returns The minimum value in the given matrix column,\n * or `undefined` if a minimum could not be found.\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getColMin(matrix, 2)); // Output: 2n\n */\nexport function getColMin(\n  matrix: Matrix<bigint>,\n  col: number\n): bigint | undefined;\n/**\n * Finds the minimum value in a given column of a matrix.\n *\n * If the matrix is empty, the column is out of bounds, or\n * the function otherwise cannot determine a minimum value,\n * then `undefined` is returned.\n *\n * @param matrix - The matrix to search.\n * @param col - The zero-based column index for the matrix.\n *\n * @returns The minimum value in the given matrix column,\n * or `undefined` if a minimum could not be found.\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getColMin(matrix, 0)); // Output: 'b'\n */\nexport function getColMin(\n  matrix: Matrix<string>,\n  col: number\n): string | undefined;\nexport function getColMin<T extends number | bigint | string>(\n  matrix: Matrix<T>,\n  x: number\n): T | undefined {\n  const Y = matrix.length;\n  if (Y <= 0 || x < 0 || x >= matrix[0].length) {\n    return undefined;\n  }\n\n  let min = matrix[0][x];\n  for (let y = 1; y < Y; ++y) {\n    if (min > matrix[y][x]) {\n      min = matrix[y][x];\n    }\n  }\n\n  return min;\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn â€” A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n */\nexport function map<A, B>(\n  matrix: Matrix<A>,\n  callbackFn: (value: A, y: number, x: number, matrix: Matrix<A>) => B\n): Matrix<B> {\n  const Y = matrix.length;\n  const out: Matrix<B> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n","import { CostFn } from \"../types/costFn\";\nimport { CostMatrix } from \"../types/costMatrix\";\nimport { getMin as getArrayMin } from \"./array\";\nimport { getColMin } from \"./matrix\";\n\n/**\n * Constructs a cost matrix for a set of\n * workers and jobs using a provided cost function.\n *\n * Each element of the matrix represents the cost associated with assigning a\n * specific worker to a specific job. The cost is determined by `costFn`,\n * which computes the cost based on a worker-job pair.\n *\n * @param workers - An array of workers.\n * @param jobs - An array of jobs.\n * @param costFn - Given a worker and a job, returns the\n * numeric cost of assigning that worker to that job.\n *\n * @returns A {@link CostMatrix} where the values at position `[y][x]`\n * represent the cost of assigning the `y`-th worker to the `x`-th job.\n *\n * @example\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) => worker.length + job.length;\n *\n * // Create the cost matrix\n * const matrix = createCostMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n */\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: CostFn<W, J>\n): CostMatrix {\n  const X = jobs.length;\n  const Y = workers.length;\n  const mat = new Array<number[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<number>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = costFn(workers[y], jobs[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param mat - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMaxCost(mat: CostMatrix): number | undefined {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = mat[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param mat - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMinCost(mat: CostMatrix): number | undefined {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = mat[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Inverts the values in a given cost matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param mat - The cost matrix to be inverted. The matrix is modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const costMatrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const anotherMatrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertCostMatrix(anotherMatrix, 50);\n *\n * // costMatrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertCostMatrix(mat: CostMatrix, bigVal?: number): void {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? getMaxCost(mat)!;\n  for (let y = 0; y < Y; ++y) {\n    const row = mat[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = bigVal - row[x];\n    }\n  }\n}\n\n/**\n * Negates the values in a given cost matrix.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param mat - The cost matrix to be negated. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the cost matrix\n * negateCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateCostMatrix(mat: CostMatrix): void {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = mat[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x];\n    }\n  }\n}\n\n/**\n * Performs column-wise reduction on a given cost matrix.\n *\n * Each column of the matrix is reduced by subtracting the minimum value\n * in the column from every value in the column.\n *\n * @param mat - The cost matrix to be reduced. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * // Perform reduction\n * reduceCols(costMatrix);\n *\n * // costMatrix now:\n * // [\n * //   [2, 1, 1],\n * //   [0, 0, 3],\n * //   [1, 2, 0]\n * // ]\n */\nexport function reduceCols(mat: CostMatrix): void {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n\n  for (let x = 0; x < X; ++x) {\n    const min = getColMin(mat, x)!;\n    if (isFinite(min)) {\n      for (let y = 0; y < Y; ++y) {\n        mat[y][x] -= min;\n      }\n    } else {\n      for (let y = 0; y < Y; ++y) {\n        mat[y][x] = mat[y][x] == min ? 0 : Infinity;\n      }\n    }\n  }\n}\n\n/**\n * Performs row-wise reduction on a given cost matrix.\n *\n * Each row of the matrix is reduced by subtracting the minimum value\n * in the row from every value in the row.\n *\n * @param mat - The cost matrix to be reduced. The matrix is modified in place.\n *\n * @example\n * const costMatrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * // Perform reduction\n * reduceRows(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [3, 0, 2],\n * //   [2, 0, 5],\n * //   [1, 0, 0]\n * // ]\n */\nexport function reduceRows(mat: CostMatrix): void {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n\n  for (let y = 0; y < Y; ++y) {\n    const row = mat[y];\n    const min = getArrayMin(row)!;\n    if (isFinite(min)) {\n      for (let x = 0; x < X; ++x) {\n        row[x] -= min;\n      }\n    } else {\n      for (let x = 0; x < X; ++x) {\n        row[x] = row[x] == min ? 0 : Infinity;\n      }\n    }\n  }\n}\n","import { Matrix } from \"..\";\nimport { CostMatrix } from \"../types/costMatrix\";\nimport { reduceCols, reduceRows } from \"./costMatrix\";\nimport { map } from \"./matrix\";\n\n/**\n * Searches for an uncovered zero in the matrix and returns its coordinates.\n * If not found, the coordinates of the smallest uncovered value are returned\n * instead.\n *\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @returns The coordinates of an uncovered zero, if found.\n * Otherwise, the coordinates to the smallest uncovered value.\n */\nexport function findUncoveredZeroOrMin(\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): [number, number] {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  let minX = -1;\n  let minY = -1;\n  let minV = undefined as unknown as number;\n\n  for (let y = 0; y < Y; ++y) {\n    if (primeY[y] >= 0) {\n      continue;\n    }\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        continue;\n      }\n      if (vals[x] == 0) {\n        return [y, x];\n      }\n      if (!(minV <= vals[x])) {\n        minV = vals[x];\n        minX = x;\n        minY = y;\n      }\n    }\n  }\n\n  return [minY, minX];\n}\n\n/**\n * Reduces the given cost matrix by performing row-wise and column-wise\n * reductions.\n *\n * This is a preprocessing step to simplify the matrix\n * and improve the efficiency of subsequent steps.\n *\n * @param mat - The cost matrix. Modified in place.\n */\nexport function step1(mat: CostMatrix): void {\n  reduceRows(mat);\n  reduceCols(mat);\n}\n\n/**\n * Performs the initial steps of searching for zeros in the cost matrix to\n * \"star\", then returns the number of stars made.\n *\n * A star indicates a potential part of the optimal solution. Each star is\n * the only one in its row and column.\n *\n * @param mat - The cost matrix.\n * @param starX - An array tracking the star status of columns.\n * @param starY - An array tracking the star status of rows.\n *\n * @returns The number of stars made.\n */\nexport function steps2To3(\n  mat: CostMatrix,\n  starX: number[],\n  starY: number[]\n): number {\n  const X = starX.length;\n  const Y = starY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (vals[x] == 0 && starX[x] < 0) {\n        starX[x] = y;\n        starY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Find and augment assignments until an optimal set is found.\n *\n * It attempts to either find an uncovered zero to star or adjusts\n * the matrix to create more zeros if none found. If an uncovered zero is\n * found but cannot be starred due to conflicts (i.e., another star in the\n * same row or column), it primes the zero and possibly adjusts existing\n * stars to resolve the conflict, thereby augmenting the current set of\n * assignments. This process is repeated until there are as many stars as\n * there are columns in the matrix, at which point optimal assignments\n * have been found.\n *\n * @param stars - The initial number of stars found in the matrix.\n * @param mat - The cost matrix. Modified in place.\n * @param starX - An array of star x coordinates to y coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n *\n * @privateRemarks\n * Based on {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | this outline} and enhanced with custom optimizations.\n */\nexport function step4(mat: CostMatrix, debug = false): number[] {\n  const starX = new Array<number>(mat[0]?.length ?? 0).fill(-1);\n  const starY = new Array<number>(mat.length).fill(-1);\n  const primeY = new Array<number>(mat.length).fill(-1);\n\n  debug && console.log(\"0:\\n\\n%s\\n\", toString(mat, starY, primeY));\n\n  // Step 1: Reduce\n  step1(mat);\n  debug && console.log(\"1:\\n\\n%s\\n\", toString(mat, starY, primeY));\n\n  // Steps 2 & 3: Find initial stars\n  let stars = steps2To3(mat, starX, starY);\n  debug && console.log(\"2&3:\\n\\n%s\\n\", toString(mat, starY, primeY));\n\n  // Step 4: Find optimal assignments\n  const S = Math.min(starX.length, starY.length);\n  while (stars < S) {\n    // Find an uncovered zero or the uncovered min\n    const [y, x] = findUncoveredZeroOrMin(mat, primeY, starX);\n\n    // Step 6: If no zero found, create a zero(s) from the min\n    if (mat[y][x] != 0) {\n      step6(mat[y][x], mat, primeY, starX);\n      debug && console.log(\"6:\\n\\n%s\\n\", toString(mat, starY, primeY));\n    }\n\n    // Prime the zero / cover the row\n    primeY[y] = x;\n    debug && console.log(\"4:\\n\\n%s\\n\", toString(mat, starY, primeY));\n\n    // Step 5: If no star in the prime's row, turn primes into stars\n    if (starY[y] < 0) {\n      step5(y, primeY, starX, starY);\n      ++stars;\n      debug && console.log(\"5:\\n\\n%s\\n\", toString(mat, starY, primeY));\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starY;\n}\n\n/**\n * Given a prime, walks an alternating path to a star in the prime's column\n * and then a prime in the star's row, starring each prime and removing each\n * star along the way. The path continues until a star cannot be found.\n *\n * This step effectively increases the number of independent zeros (stars)\n * in the matrix, bringing the algorithm closer to an optimal assignment.\n *\n * @param y - The starting prime's y coordinate.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n */\nexport function step5(\n  y: number,\n  primeY: number[],\n  starX: number[],\n  starY: number[]\n): void {\n  // Sanity check\n  if (primeY[y] < 0) {\n    throw new Error(\"Input must be prime.\");\n  }\n\n  let sy = y;\n  while (sy >= 0) {\n    // Go to the next prime\n    const x = primeY[sy];\n    y = sy;\n    sy = starX[x];\n\n    // Mark prime as a star\n    primeY[y] = -1;\n    starX[x] = y;\n    starY[y] = x;\n  }\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros.\n *\n * The matrix is modified by adding a given value to each element in a row\n * with a prime, and subtracting the given value to each element not in a\n * column with a star.\n *\n * @param min - The value to adjust the matrix by.\n * Should be the smallest uncovered value.\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n */\nexport function step6(\n  min: number,\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  if (!isFinite(min)) {\n    return step6Inf(mat, primeY, starX);\n  }\n\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          vals[x] += min;\n        }\n      } else if (primeY[y] < 0) {\n        vals[x] -= min;\n      }\n    }\n  }\n}\n\nexport function step6Inf(\n  mat: CostMatrix,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          vals[x] += Infinity;\n        }\n      } else if (primeY[y] < 0) {\n        vals[x] = 0;\n      }\n    }\n  }\n}\n\n/**\n * Generates a string representation of the cost matrix,\n * annotating starred (*) and primed (\") elements.\n *\n * Stars (*) indicate part of a potential solution, while primes (\") mark\n * elements considered for augmenting the current solution. This visualization\n * aids in understanding and debugging the matrix's state at various steps of\n * the algorithm.\n *\n * @param mat - The cost matrix.\n * @param starY - An array of star y coordinates to x coordinates.\n * @param primeY - (Optional) An array of prime y coordinates to x coordinates.\n *\n * @returns A string visualization of the matrix with stars and primes.\n */\nexport function toString(\n  mat: CostMatrix,\n  starY: number[],\n  primeY: number[] = []\n): string {\n  const strs: Matrix<string> = map(mat, v => `${v}`);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // Mark values as stars or primes\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    if (starY[y] >= 0) {\n      row[starY[y]] = \"*\" + row[starY[y]];\n    }\n    if (primeY[y] >= 0) {\n      row[primeY[y]] = '\"' + row[primeY[y]];\n    }\n  }\n\n  // Get column width\n  let width = 0;\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      width = Math.max(width, strs[y][x].length);\n    }\n  }\n\n  // Adjust widths\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    for (let x = 0; x < X; ++x) {\n      if (row[x].length < width) {\n        row[x] = row[x].padStart(width, \" \");\n      }\n    }\n  }\n\n  /*\n\n  // Create starX\n  const starX: number[] = new Array(X).fill(-1);\n  for (let y = 0; y < Y; ++y) {\n    if (starY[y] >= 0) {\n      starX[starY[y]] = y;\n    }\n  }\n  \n  // Mark values as covered\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          strs[y][x] = `â«¢${strs[y][x]}â«¤`;\n        } else {\n          strs[y][x] = `|${strs[y][x]}|`;\n        }\n      } else if (primeY[y] >= 0) {\n        strs[y][x] = `=${strs[y][x]}=`;\n      } else {\n        strs[y][x] = ` ${strs[y][x]} `;\n      }\n    }\n  }\n  */\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n  return buf.join(\",\\n\");\n}\n","import { CostMatrix } from \"./types/costMatrix\";\nimport { copy } from \"./utils/matrix\";\nimport { step4 } from \"./utils/munkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param mat - The cost matrix where `mat[y][x]` represents the cost of\n * assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n *\n * @remarks\n * Runs the {@link https://en.wikipedia.org/wiki/Hungarian_algorithm | Munkres algorithm (aka Hungarian algorithm)} to solve\n * the {@link https://en.wikipedia.org/wiki/Assignment_problem | assignment problem}.\n */\nexport function munkres(mat: CostMatrix, debug = false): [number, number][] {\n  return Array.from(step4(copy(mat), debug).entries()).filter(\n    ([, x]) => x >= 0\n  );\n}\n"],"names":["getMin","array","N","min","i","copy","matrix","Y","dupe","y","getColMin","x","map","callbackFn","out","from","X","to","createCostMatrix","workers","jobs","costFn","mat","row","getMaxCost","_a","max","getMinCost","invertCostMatrix","bigVal","negateCostMatrix","reduceCols","reduceRows","getArrayMin","findUncoveredZeroOrMin","primeY","starX","minX","minY","minV","vals","step1","steps2To3","starY","stars","step4","debug","toString","S","step6","step5","sy","step6Inf","strs","v","width","buf","munkres"],"mappings":"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"}