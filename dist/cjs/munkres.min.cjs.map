{"version":3,"file":"munkres.min.cjs","sources":["../../src/utils/matrixLike.ts","../../src/utils/matrix.ts","../../src/helpers.ts","../../src/utils/is.ts","../../src/utils/arrayLike.ts","../../src/core/bigMunkresB.ts","../../src/core/bigMunkres.ts","../../src/core/numMunkresB.ts","../../src/core/numMunkres.ts","../../src/core/munkres.ts","../../src/utils/matching.ts","../../src/munkres.ts"],"sourcesContent":["import { MatrixLike } from \"../types/matrixLike\";\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMax(matrix)); // Output: 8\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMax(matrix)); // Output: 8n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMax(matrix)); // Output: 'i'\n */\nexport function getMax(matrix: MatrixLike<number>): number | undefined;\nexport function getMax(matrix: MatrixLike<bigint>): bigint | undefined;\nexport function getMax(matrix: MatrixLike<string>): string | undefined;\nexport function getMax<T extends number | bigint | string>(\n  matrix: MatrixLike<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMin(matrix)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMin(matrix)); // Output: 0n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMin(matrix)); // Output: 'a'\n */\nexport function getMin(matrix: MatrixLike<number>): number | undefined;\nexport function getMin(matrix: MatrixLike<bigint>): bigint | undefined;\nexport function getMin(matrix: MatrixLike<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  matrix: MatrixLike<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n","import { Matrix } from \"../types/matrix\";\nimport { MatrixLike } from \"../types/matrixLike\";\nimport { getMax } from \"./matrixLike\";\n\n/**\n * Creates a matrix with specified rows and columns.\n *\n * The callback function is called for every combination of elements from the\n * `rows` and `columns` arrays, receiving the current row and column elements\n * as arguments, and its return value is used to populate the matrix.\n *\n * @param rows - An array of row elements.\n * @param columns - An array of column elements.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row element and a column element as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = [1, 2];\n * const cols = ['a', 'b', 'c'];\n * const callbackFn = (row, col) =\\> `${row}${col}`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['1a', '1b', '1c'],\n * //   ['2a', '2b', '2c']\n * // ]\n */\nexport function create<R, C, T>(\n  rows: ArrayLike<R>,\n  columns: ArrayLike<C>,\n  callbackFn: (row: R, col: C) => T\n): Matrix<T> {\n  const Y = rows.length;\n  const X = columns.length;\n  const mat = new Array<T[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<T>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = callbackFn(rows[y], columns[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Flips a matrix horizontally.\n *\n * After the flip, the element at position `[y][x]` moves to `[y][M-x-1]`,\n * where `M` is the number of columns in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipH(matrix);\n * // matrix is now:\n * // [\n * //   [3, 2, 1],\n * //   [6, 5, 4],\n * //   [9, 8, 7]\n * // ]\n */\nexport function flipH<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].reverse();\n  }\n}\n\n/**\n * Flips a matrix vertically.\n *\n * After the flip, the element at position `[y][x]` moves to `[N-y-1][x]`,\n * where `N` is the number of rows in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipV(matrix);\n * // matrix is now:\n * // [\n * //   [7, 8, 9],\n * //   [4, 5, 6],\n * //   [1, 2, 3]\n * // ]\n */\nexport function flipV<T>(matrix: Matrix<T>): void {\n  matrix.reverse();\n}\n\n/**\n * Creates a {@link Matrix} from a given {@link MatrixLike}.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the given matrix.\n */\nexport function from<T>(matrix: MatrixLike<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const rowA = matrix[y];\n    const X = rowA.length;\n    const rowB = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      rowB[x] = rowA[x];\n    }\n    dupe[y] = rowB;\n  }\n  return dupe;\n}\n\n/**\n * Generates a matrix with specified rows and columns.\n *\n * The callback function is called with every combination of row and column indices,\n * and its return value is used to populate the matrix.\n *\n * @param rows - The number of rows.\n * @param columns - The number of columns.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row and column index as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = 2;\n * const cols = 3;\n * const callbackFn = (row, col) =\\> `(${row},${col})`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['(0,0)', '(0,1)', '(0,2)'],\n * //   ['(1,0)', '(1,1)', '(1,2)']\n * // ]\n */\nexport function gen<T>(\n  rows: number,\n  cols: number,\n  callbackFn: (row: number, col: number) => T\n): Matrix<T> {\n  const matrix: Matrix<T> = new Array(rows);\n\n  for (let r = 0; r < rows; ++r) {\n    const row = new Array<T>(cols);\n    for (let c = 0; c < cols; ++c) {\n      row[c] = callbackFn(r, c);\n    }\n    matrix[r] = row;\n  }\n\n  return matrix;\n}\n\n/**\n * Inverts the values in a given matrix by\n * subtracting each element from a given large value.\n *\n * @param matrix - The matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, uses the maximum value in the matrix.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * invert(matrix);\n * // matrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const matrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * invert(matrix, 50);\n * // matrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invert(matrix: Matrix<number>, bigVal?: number): void;\nexport function invert(matrix: Matrix<bigint>, bigVal?: bigint): void;\nexport function invert<T extends number | bigint>(\n  matrix: Matrix<T>,\n  bigVal?: T\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? (getMax(matrix as Matrix<number>)! as T);\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = (bigVal - row[x]) as T;\n    }\n  }\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn - A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(map(matrix, v =\\> v * v));\n * // Output: [\n * //   [ 1,  9,  4],\n * //   [16,  0, 36],\n * //   [49, 25, 64]\n * // ]\n */\nexport function map<T, R>(\n  matrix: MatrixLike<T>,\n  callbackFn: (value: T, y: number, x: number, mat: typeof matrix) => R\n): Matrix<R> {\n  const Y = matrix.length;\n  const out: Matrix<R> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n\n/**\n * Negates the values in a given matrix.\n *\n * @param matrix - The matrix to be negated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * negate(matrix);\n * // matrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negate(matrix: Matrix<number>): void;\nexport function negate(matrix: Matrix<bigint>): void;\nexport function negate(matrix: Matrix<number | bigint>): void;\nexport function negate<T extends number | bigint>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x] as T;\n    }\n  }\n}\n\n/**\n * Pads a matrix to a specified size with a given fill value.\n *\n * The padding is applied from the ends (right) of each row and\n * the ends (bottom) of each column. If a dimension is already\n * at or above the desired value, no change is made to it.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value used for padding.\n */\nexport function pad<T>(\n  matrix: Matrix<T>,\n  height: number,\n  width: number,\n  fillValue: T\n): void {\n  padHeight(matrix, height, fillValue);\n  padWidth(matrix, width, fillValue);\n}\n\n/**\n * Pads the height (number of rows) of a matrix with a given fill value.\n *\n * Rows are added to the end (bottom) of the matrix until its height reaches\n * `height`, with each new row filled with `fillValue`. If the matrix is\n * already at or above `height`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param fillValue - The value to use for filling new rows.\n */\nexport function padHeight<T>(\n  matrix: Matrix<T>,\n  height: number,\n  fillValue: T\n): void {\n  const Y = matrix.length;\n  if (Y >= height) {\n    return;\n  }\n\n  matrix.length = height;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = Y; y < height; ++y) {\n    matrix[y] = new Array<T>(X).fill(fillValue);\n  }\n}\n\n/**\n * Pads the width (number of columns) of a matrix with a given fill value.\n *\n * Columns are added to the right of the matrix until its width reaches\n * `width`, with each new column filled with `fillValue`. If the matrix is\n * already at or above `width`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value to use for filling new columns.\n */\nexport function padWidth<T>(\n  matrix: Matrix<T>,\n  width: number,\n  fillValue: T\n): void {\n  const X = matrix[0]?.length ?? 0;\n  if (X >= width) {\n    return;\n  }\n\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].length = width;\n    matrix[y].fill(fillValue, X, width);\n  }\n}\n\n/**\n * Rotates a matrix by 90 degrees clockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 1],\n * //   [4, 2]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [4, 1],\n * //   [5, 2],\n * //   [6, 3]\n * // ]\n */\nexport function rot90<T>(matrix: Matrix<T>): void {\n  flipV(matrix);\n  transpose(matrix);\n}\n\n/**\n * Rotates a matrix by 90 degrees counterclockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [2, 4],\n * //   [1, 3]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 6],\n * //   [2, 5],\n * //   [1, 4]\n * // ]\n */\nexport function rotNeg90<T>(matrix: Matrix<T>): void {\n  transpose(matrix);\n  flipV(matrix);\n}\n/**\n * Generates a string representation of a matrix.\n *\n * @param matrix - The matrix.\n * @param callbackFn - (Optional) A callback function to convert each element\n * to a string. Defaults to using each elements `toString` method.\n *\n * @returns A string representation of the matrix.\n */\nexport function toString<T>(\n  matrix: MatrixLike<T>,\n  callbackFn: (\n    value: T,\n    row: number,\n    col: number,\n    mat: typeof matrix\n  ) => string = v => `${v}`\n): string {\n  const strs: Matrix<string> = map(matrix, callbackFn);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // For each column\n  for (let x = 0; x < X; ++x) {\n    // Get width\n    let width = 0;\n    for (let y = 0; y < Y; ++y) {\n      width = Math.max(width, strs[y][x].length);\n    }\n\n    // Adjust width\n    for (let y = 0; y < Y; ++y) {\n      strs[y][x] = strs[y][x].padStart(width, \" \");\n    }\n  }\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n\n  // Return output\n  return buf.join(\",\\n\");\n}\n\n/**\n * Transpose a given matrix, switching its rows and columns.\n *\n * In the transposed matrix, the value originally at position [y][x]\n * moves to [x][y], effectively turning rows of the original matrix into\n * columns in the output matrix, and vice versa.\n *\n * @param matrix - The matrix to transpose. Modified in place.\n *\n * @example\n * // Transpose a 2x3 matrix to a 3x2 matrix\n * const original = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * transpose(original);\n * // transposed is now:\n * // [\n * //   [1, 4],\n * //   [2, 5],\n * //   [3, 6]\n * // ]\n */\nexport function transpose<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose shared square\n  const N = Math.min(Y, X);\n  for (let y = 1; y < N; ++y) {\n    for (let x = 0; x < y; ++x) {\n      const temp = matrix[y][x];\n      matrix[y][x] = matrix[x][y];\n      matrix[x][y] = temp;\n    }\n  }\n\n  // Add columns\n  if (Y > X) {\n    for (let y = 0; y < X; ++y) {\n      const row = matrix[y];\n      row.length = Y;\n      for (let x = X; x < Y; ++x) {\n        row[x] = matrix[x][y];\n      }\n    }\n    matrix.length = X;\n  }\n\n  // Add rows\n  if (Y < X) {\n    matrix.length = X;\n    for (let y = Y; y < X; ++y) {\n      const row = new Array(Y);\n      for (let x = 0; x < Y; ++x) {\n        row[x] = matrix[x][y];\n      }\n      matrix[y] = row;\n    }\n    for (let y = 0; y < Y; ++y) {\n      matrix[y].length = Y;\n    }\n  }\n}\n","import { Matrix } from \"./types/matrix\";\nimport { MatrixLike } from \"./types/matrixLike\";\n\nimport { create, from, gen, invert, negate } from \"./utils/matrix\";\nimport { getMax, getMin } from \"./utils/matrixLike\";\n\n/**\n * Creates a copy from a given matrix or matrix-like input.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the given matrix.\n */\nexport function copyMatrix<T>(matrix: MatrixLike<T>): Matrix<T> {\n  return from(matrix);\n}\n\n/**\n * Constructs a matrix from a set of row\n * and column objects using a provided callback function.\n *\n * @param rows - An array of row objects (such as workers).\n * @param cols - An array of column objects (such as jobs).\n * @param callbackFn - Given a row and a column, returns a value.\n *\n * @returns A matrix where the values at position `[r][c]`\n * represent the value derived from row `r` and column `c`.\n *\n * @example\n * ```typescript\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) => worker.length + job.length;\n *\n * // Create a cost matrix\n * const costs = createMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n * ```\n */\nexport function createMatrix<R, C, T>(\n  rows: ArrayLike<R>,\n  cols: ArrayLike<C>,\n  callbackFn: (row: R, col: C) => T\n): Matrix<T> {\n  return create(rows, cols, callbackFn);\n}\n\n/**\n * Constructs a matrix with given dimensions\n * using a provided callback function.\n *\n * @param rows - The number of rows in the matrix.\n * @param cols - The number of columns in the matrix.\n * @param callbackFn - Given row and column indices, returns a value.\n *\n * @returns A matrix where the values at position `[r][c]`\n * represent the value derived from row `r` and column `c`.\n *\n * @example\n * ```typescript\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (w: number, j: number) => workers[w].length + jobs[j].length;\n *\n * // Create a cost matrix\n * const costs = createMatrix(workers.length, jobs.length, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n * ```\n */\nexport function genMatrix<T>(\n  rows: number,\n  cols: number,\n  callbackFn: (row: number, col: number) => T\n): Matrix<T> {\n  return gen(rows, cols, callbackFn);\n}\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMatrixMax(matrix: MatrixLike<number>): number | undefined;\nexport function getMatrixMax(matrix: MatrixLike<bigint>): bigint | undefined;\nexport function getMatrixMax<T extends number | bigint>(\n  matrix: MatrixLike<T>\n): T | undefined {\n  return getMax(matrix as MatrixLike<number>) as T | undefined;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n */\nexport function getMatrixMin(matrix: MatrixLike<number>): number | undefined;\nexport function getMatrixMin(matrix: MatrixLike<bigint>): bigint | undefined;\nexport function getMatrixMin<T extends number | bigint>(\n  matrix: MatrixLike<T>\n): T | undefined {\n  return getMin(matrix as MatrixLike<number>) as T | undefined;\n}\n\n/**\n * Inverts the values in a given matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a profit matrix\n * into a cost matrix, or vice versa.\n *\n * @param matrix - The cost matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertMatrix(matrix);\n *\n * // matrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const matrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertMatrix(matrix, 50);\n *\n * // matrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertMatrix(matrix: Matrix<number>, bigVal?: number): void;\nexport function invertMatrix(matrix: Matrix<bigint>, bigVal?: bigint): void;\nexport function invertMatrix<T extends number | bigint>(\n  matrix: Matrix<T>,\n  bigVal?: T\n): void {\n  invert(matrix as Matrix<number>, bigVal as number);\n}\n\n/**\n * Negates the values in a given matrix.\n *\n * This is useful for converting a profit matrix\n * into a cost matrix, or vice versa.\n *\n * @param matrix - The matrix to be negated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the matrix\n * negateMatrix(matrix);\n *\n * // matrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateMatrix(matrix: Matrix<number>): void;\nexport function negateMatrix(matrix: Matrix<bigint>): void;\nexport function negateMatrix<T extends number | bigint>(\n  matrix: Matrix<T>\n): void {\n  negate(matrix);\n}\n","/**\n * Checks if the given value is of type `bigint`.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type `bigint`, `false` otherwise.\n *\n * @example\n * console.log(isBigInt(10n)); // true\n *\n * @example\n * console.log(isBigInt(10)); // false\n */\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n/**\n * Checks if the given value is of type `number`.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type `number`, `false` otherwise.\n *\n * @example\n * console.log(isNumber(10)); // true\n *\n * @example\n * console.log(isNumber(10n)); // false\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n","/**\n * Transforms the given array into an array of key, value pairs\n * for every entry in the array.\n *\n * @param array - The array to transform into entries.\n *\n * @returns An array of key, value pairs for every entry in the array.\n *\n * @example\n * entries(['a', 'b', 'c']);\n * // Returns [[0, 'a'], [1, 'b'], [2, 'c']]\n */\nexport function entries<T>(array: ArrayLike<T>): [number, T][] {\n  const N = array.length;\n  const out = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    out[i] = [i, array[i]];\n  }\n  return out;\n}\n\n/**\n * Find the minimum value in a given array.\n *\n * @param array - An array.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n *\n * @example\n * const array = [3, 1, 2];\n * console.log(getMin(array)); // Output: 1\n *\n * @example\n * const array = [3n, 1n, 2n];\n * console.log(getMin(array)); // Output: 1n\n *\n * @example\n * const array = ['d', 'b', 'c'];\n * console.log(getMin(array)); // Output: 'b'\n */\nexport function getMin(array: ArrayLike<number>): number | undefined;\nexport function getMin(array: ArrayLike<bigint>): bigint | undefined;\nexport function getMin(array: ArrayLike<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: ArrayLike<T>\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","import { MatrixLike } from \"../types/matrixLike\";\nimport { MutableArrayLike } from \"../types/mutableArrayLike\";\nimport { zeroUncoveredMin } from \"./munkres\";\n\nexport function step4B(\n  unmatched: number,\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const Y = dualY.length;\n  const slack = new Uint32Array(Y);\n  const slackV = new Array<bigint>(Y);\n  const slackX = new Uint32Array(Y);\n\n  for (let rootX = 0; unmatched > 0; ++rootX) {\n    if (starsX[rootX] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let zeros = initStageB(rootX, matrix, dualX, dualY, slack, slackV, slackX);\n\n    // Run stage\n    let steps = 1;\n    let y: number;\n    for (y = slack[0]; starsY[y] !== -1; y = slack[steps++]) {\n      // Update stage\n      const x = starsY[y];\n      const ds = slackV[y];\n      const dx = dualX[x] - ds;\n      for (let i = zeros; i < Y; ++i) {\n        y = slack[i];\n        const value = matrix[y][x] - dualY[y] - dx;\n        if (value < slackV[y]) {\n          if (value === ds) {\n            slack[i] = slack[zeros];\n            slack[zeros++] = y;\n          }\n          slackV[y] = value;\n          slackX[y] = x;\n        }\n      }\n\n      // If no zeros, zero the min\n      if (steps >= zeros) {\n        zeros = zeroUncoveredMin(zeros, slack, slackV);\n      }\n    }\n\n    // Update dual variables\n    step6B(rootX, steps, dualX, dualY, slack, slackV, starsY);\n\n    // Turn primes into stars\n    step5B(y, slackX, starsX, starsY);\n\n    // Update unmatched count\n    --unmatched;\n  }\n}\n\nexport function step5B(\n  y: number,\n  primeY: ArrayLike<number>,\n  starsX: number[],\n  starsY: number[]\n): void {\n  do {\n    const x = primeY[y];\n    const sy = starsX[x];\n    starsX[x] = y;\n    starsY[y] = x;\n    y = sy;\n  } while (y !== -1);\n}\n\nexport function step6B(\n  x: number,\n  N: number,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: ArrayLike<number>,\n  slackV: ArrayLike<bigint>,\n  starsY: number[]\n): void {\n  const sum = slackV[slack[N - 1]];\n\n  let min = sum;\n  for (let i = 0; i < N; ++i) {\n    const y = slack[i];\n    dualX[x] += min;\n    min = sum - slackV[y];\n    dualY[y] -= min;\n    x = starsY[y];\n  }\n}\n\nexport function initStageB(\n  x: number,\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: MutableArrayLike<number>,\n  slackV: MutableArrayLike<bigint>,\n  slackX: MutableArrayLike<number>\n): number {\n  const dx = dualX[x];\n  const Y = slack.length;\n\n  let zeros = 0;\n  for (let y = 0; y < Y; ++y) {\n    slack[y] = y;\n    slackX[y] = x;\n    slackV[y] = matrix[y][x] - dualY[y] - dx;\n    if (slackV[y] === 0n) {\n      slack[y] = slack[zeros];\n      slack[zeros++] = y;\n    }\n  }\n\n  return zeros || zeroUncoveredMin(zeros, slack, slackV);\n}\n","import { MatrixLike } from \"../types/matrixLike\";\nimport { Matching } from \"../types/matching\";\nimport { MutableArrayLike } from \"../types/mutableArrayLike\";\n\nimport { getMin } from \"../utils/arrayLike\";\n\nimport { step4B as step4b } from \"./bigMunkresB\";\nimport { zeroUncoveredMin } from \"./munkres\";\n\nexport function exec(matrix: MatrixLike<bigint>): Matching<bigint> {\n  // Get dimensions\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Step 1: Reduce\n  const dualX = new Array<bigint>(X);\n  const dualY = new Array<bigint>(Y);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  const stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Step 4: Find complete matching\n  Y <= X\n    ? step4(Y - stars, matrix, dualX, dualY, starsX, starsY)\n    : step4b(X - stars, matrix, dualX, dualY, starsX, starsY);\n\n  // Return matching\n  return { dualX, dualY, matrix, starsX, starsY };\n}\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  // Reduce rows\n  if (Y > X) {\n    dualY.fill(0n);\n  } else {\n    for (let y = 0; y < Y; ++y) {\n      dualY[y] = getMin(matrix[y])!;\n    }\n  }\n\n  // If matrix is wide, skip column reduction\n  if (Y < X) {\n    dualX.fill(0n);\n    return;\n  }\n\n  // Initialize column reduction\n  let dy = dualY[0];\n  let row = matrix[0];\n  for (let x = 0; x < X; ++x) {\n    dualX[x] = row[x] - dy;\n  }\n\n  // Reduce columns\n  for (let y = 1; y < Y; ++y) {\n    dy = dualY[y];\n    row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dx = row[x] - dy;\n      if (dx < dualX[x]) {\n        dualX[x] = dx;\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix.\n * @param dualY - The dual variables associated with each row of the matrix.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n  const S = Y <= X ? Y : X;\n\n  let stars = 0;\n  for (let y = 0; y < Y && stars < S; ++y) {\n    const dy = dualY[y];\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (starsX[x] === -1 && dy === row[x] - dualX[x]) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param unmatched - The number of missing matches.\n * @param mat - An MxN cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step4(\n  unmatched: number,\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const X = dualX.length;\n  const slack = new Uint32Array(X);\n  const slackV = new Array<bigint>(X);\n  const slackY = new Uint32Array(X);\n\n  for (let rootY = 0; unmatched > 0; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let zeros = initStage(rootY, matrix, dualX, dualY, slack, slackV, slackY);\n\n    // Run stage\n    let steps = 1;\n    let x: number;\n    for (x = slack[0]; starsX[x] !== -1; x = slack[steps++]) {\n      // Update stage\n      const y = starsX[x];\n      const ds = slackV[x];\n      const dy = dualY[y] - ds;\n      const row = matrix[y];\n      for (let i = zeros; i < X; ++i) {\n        x = slack[i];\n        const value = row[x] - dualX[x] - dy;\n        if (value < slackV[x]) {\n          if (value === ds) {\n            slack[i] = slack[zeros];\n            slack[zeros++] = x;\n          }\n          slackV[x] = value;\n          slackY[x] = y;\n        }\n      }\n\n      // If no zeros, zero the min\n      if (steps >= zeros) {\n        zeros = zeroUncoveredMin(zeros, slack, slackV);\n      }\n    }\n\n    // Update dual variables\n    step6(rootY, steps, dualX, dualY, slack, slackV, starsX);\n\n    // Turn primes into stars\n    step5(x, slackY, starsX, starsY);\n\n    // Update unmatched count\n    --unmatched;\n  }\n}\n\n/**\n * Augments the current matching.\n *\n * This step effectively increases the number of matches (stars)\n * by 1, bringing the algorithm closer to an optimal assignment.\n *\n * Augmentation is performed by flipping matched and unmatched edges along\n * an augmenting path, starting from an unmatched node / edge and\n * continuing until no matched edge can be found.\n *\n * @param x - The starting node's column.\n * @param primeX - An array mapping primed columns to rows.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step5(\n  x: number,\n  primeX: ArrayLike<number>,\n  starsX: number[],\n  starsY: number[]\n): void {\n  do {\n    const y = primeX[x];\n    const sx = starsY[y];\n    starsX[x] = y;\n    starsY[y] = x;\n    x = sx;\n  } while (x !== -1);\n}\n\n/**\n * Adjusts dual variables to uncover more admissible edges.\n *\n * @param N - The number of adjustments to make.\n * @param min - The value to adjust by.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param slack - An array of covered column indices.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  y: number,\n  N: number,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: ArrayLike<number>,\n  slackV: ArrayLike<bigint>,\n  starsX: number[]\n): void {\n  const sum = slackV[slack[N - 1]];\n\n  let min = sum;\n  for (let i = 0; i < N; ++i) {\n    const x = slack[i];\n    dualY[y] += min;\n    min = sum - slackV[x];\n    dualX[x] -= min;\n    y = starsX[x];\n  }\n}\n\nexport function initStage(\n  y: number,\n  matrix: MatrixLike<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: MutableArrayLike<number>,\n  slackV: MutableArrayLike<bigint>,\n  slackY: MutableArrayLike<number>\n): number {\n  const dy = dualY[y];\n  const row = matrix[y];\n  const X = slack.length;\n\n  let zeros = 0;\n  for (let x = 0; x < X; ++x) {\n    slack[x] = x;\n    slackY[x] = y;\n    slackV[x] = row[x] - dualX[x] - dy;\n    if (slackV[x] === 0n) {\n      slack[x] = slack[zeros];\n      slack[zeros++] = x;\n    }\n  }\n\n  return zeros || zeroUncoveredMin(zeros, slack, slackV);\n}\n","import { MatrixLike } from \"../types/matrixLike\";\nimport { MutableArrayLike } from \"../types/mutableArrayLike\";\n\nimport { step5B } from \"./bigMunkresB\";\nimport { zeroUncoveredMin } from \"./munkres\";\n\nexport function step4B(\n  unmatched: number,\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const Y = dualY.length;\n  const slack = new Uint32Array(Y);\n  const slackV = new Array<number>(Y);\n  const slackX = new Uint32Array(Y);\n\n  for (let rootX = 0; unmatched > 0; ++rootX) {\n    if (starsX[rootX] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let zeros = initStageB(rootX, matrix, dualX, dualY, slack, slackV, slackX);\n\n    // Run stage\n    let steps = 1;\n    let y: number;\n    for (y = slack[0]; starsY[y] !== -1; y = slack[steps++]) {\n      // Update stage\n      const x = starsY[y];\n      const ds = slackV[y];\n      const dx = dualX[x];\n      for (let i = zeros; i < Y; ++i) {\n        y = slack[i];\n        const value = (matrix[y][x] - (dx + dualY[y] || 0) || 0) + ds || 0;\n        if (value < slackV[y]) {\n          if (value === ds) {\n            slack[i] = slack[zeros];\n            slack[zeros++] = y;\n          }\n          slackV[y] = value;\n          slackX[y] = x;\n        }\n      }\n\n      // If no zeros, zero the min\n      if (steps >= zeros) {\n        zeros = zeroUncoveredMin(zeros, slack, slackV);\n      }\n    }\n\n    // Update dual variables\n    step6B(rootX, steps, dualX, dualY, slack, slackV, starsY);\n\n    // Turn primes into stars\n    step5B(y, slackX, starsX, starsY);\n\n    // Update unmatched count\n    --unmatched;\n  }\n}\n\nexport function step6B(\n  x: number,\n  N: number,\n  dualX: number[],\n  dualY: number[],\n  slack: ArrayLike<number>,\n  slackV: ArrayLike<number>,\n  starsY: number[]\n): void {\n  const sum = slackV[slack[N - 1]];\n\n  let min = sum;\n  for (let i = 0; i < N; ++i) {\n    const y = slack[i];\n    dualX[x] = dualX[x] + min || 0;\n    min = sum - slackV[y] || 0;\n    dualY[y] = dualY[y] - min || 0;\n    x = starsY[y];\n  }\n}\n\nexport function initStageB(\n  x: number,\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[],\n  slack: MutableArrayLike<number>,\n  slackV: MutableArrayLike<number>,\n  slackX: MutableArrayLike<number>\n): number {\n  const dx = dualX[x];\n  const Y = slack.length;\n\n  let zeros = 0;\n  for (let y = 0; y < Y; ++y) {\n    slack[y] = y;\n    slackX[y] = x;\n    slackV[y] = matrix[y][x] - (dx + dualY[y] || 0) || 0;\n    if (slackV[y] === 0) {\n      slack[y] = slack[zeros];\n      slack[zeros++] = y;\n    }\n  }\n\n  return zeros || zeroUncoveredMin(zeros, slack, slackV);\n}\n","import { MatrixLike } from \"../types/matrixLike\";\nimport { Matching } from \"../types/matching\";\nimport { MutableArrayLike } from \"../types/mutableArrayLike\";\n\nimport { getMin } from \"../utils/arrayLike\";\n\nimport { step5 } from \"./bigMunkres\";\nimport { step4B as step4b } from \"./numMunkresB\";\nimport { zeroUncoveredMin } from \"./munkres\";\n\nexport function exec(matrix: MatrixLike<number>): Matching<number> {\n  // Get dimensions\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Step 1: Reduce\n  const dualX = new Array<number>(X);\n  const dualY = new Array<number>(Y);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  const stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Step 4: Find complete matching\n  Y <= X\n    ? step4(Y - stars, matrix, dualX, dualY, starsX, starsY)\n    : step4b(X - stars, matrix, dualX, dualY, starsX, starsY);\n\n  // Return matching\n  return { dualX, dualY, matrix, starsX, starsY };\n}\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  // Reduce rows\n  if (Y > X) {\n    dualY.fill(0);\n  } else {\n    for (let y = 0; y < Y; ++y) {\n      dualY[y] = getMin(matrix[y])!;\n    }\n  }\n\n  // If matrix is wide, skip column reduction\n  if (Y < X) {\n    dualX.fill(0);\n    return;\n  }\n\n  // Initialize column reduction\n  let dy = dualY[0];\n  let row = matrix[0];\n  for (let x = 0; x < X; ++x) {\n    dualX[x] = row[x] - dy || 0;\n  }\n\n  // Reduce columns\n  for (let y = 1; y < Y; ++y) {\n    dy = dualY[y];\n    row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dx = row[x] - dy || 0;\n      if (dx < dualX[x]) {\n        dualX[x] = dx;\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n  const S = Y <= X ? Y : X;\n\n  let stars = 0;\n  for (let y = 0; y < Y && stars < S; ++y) {\n    const dy = dualY[y];\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (starsX[x] === -1 && row[x] === (dualX[x] + dy || 0)) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param unmatched - The number of missing matches.\n * @param mat - An MxN cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step4(\n  unmatched: number,\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const X = dualX.length;\n  const slack = new Uint32Array(X);\n  const slackV = new Array<number>(X);\n  const slackY = new Uint32Array(X);\n\n  // For each unmatched row\n  for (let rootY = 0; unmatched > 0; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let zeros = initStage(rootY, matrix, dualX, dualY, slack, slackV, slackY);\n\n    // Run stage\n    let steps = 1;\n    let x: number;\n    for (x = slack[0]; starsX[x] !== -1; x = slack[steps++]) {\n      // Update stage\n      const y = starsX[x];\n      const dy = dualY[y];\n      const ds = slackV[x];\n      const row = matrix[y];\n      for (let i = zeros; i < X; ++i) {\n        x = slack[i];\n        const value = (row[x] - (dualX[x] + dy || 0) || 0) + ds || 0;\n        if (value < slackV[x]) {\n          if (value === ds) {\n            slack[i] = slack[zeros];\n            slack[zeros++] = x;\n          }\n          slackV[x] = value;\n          slackY[x] = y;\n        }\n      }\n\n      // If no zeros, zero the min\n      if (steps >= zeros) {\n        zeros = zeroUncoveredMin(zeros, slack, slackV);\n      }\n    }\n\n    // Update dual variables\n    step6(rootY, steps, dualX, dualY, slack, slackV, starsX);\n\n    // Turn primes into stars\n    step5(x, slackY, starsX, starsY);\n\n    // Update unmatched count\n    --unmatched;\n  }\n}\n\n/**\n * Adjusts dual variables and slack to uncover more admissible edges.\n *\n * @param pivot - The value to adjust by.\n * @param covV - The value indicating a row is covered.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param exposedX - An array indicating uncovered columns.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  y: number,\n  N: number,\n  dualX: number[],\n  dualY: number[],\n  slack: MutableArrayLike<number>,\n  slackV: MutableArrayLike<number>,\n  starsX: number[]\n): void {\n  const sum = slackV[slack[N - 1]];\n\n  let min = sum;\n  for (let i = 0; i < N; ++i) {\n    const x = slack[i];\n    dualY[y] = dualY[y] + min || 0;\n    min = sum - slackV[x] || 0;\n    dualX[x] = dualX[x] - min || 0;\n    y = starsX[x];\n  }\n}\n\nexport function initStage(\n  y: number,\n  matrix: MatrixLike<number>,\n  dualX: number[],\n  dualY: number[],\n  slack: MutableArrayLike<number>,\n  slackV: MutableArrayLike<number>,\n  slackY: MutableArrayLike<number>\n): number {\n  const dy = dualY[y];\n  const row = matrix[y];\n  const X = slack.length;\n\n  let zeros = 0;\n  for (let x = 0; x < X; ++x) {\n    slack[x] = x;\n    slackY[x] = y;\n    slackV[x] = row[x] - (dualX[x] + dy || 0) || 0;\n    if (slackV[x] === 0) {\n      slack[x] = slack[zeros];\n      slack[zeros++] = x;\n    }\n  }\n\n  return zeros || zeroUncoveredMin(zeros, slack, slackV);\n}\n","import { MatrixLike } from \"../types/matrixLike\";\nimport { Matching } from \"../types/matching\";\n\nimport { isBigInt } from \"../utils/is\";\n\nimport { exec as bigExec } from \"./bigMunkres\";\nimport { exec as numExec } from \"./numMunkres\";\nimport { MutableArrayLike } from \"../types/mutableArrayLike\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n *\n * @privateRemarks\n * Citations:\n * 1. {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | Munkres' Assignment Algorithm, Modified for Rectangular Matrices}\n *     - Used as the foundation and enhanced with custom optimizations.\n *\n * 1. {@link https://www.ri.cmu.edu/pub_files/pub4/mills_tettey_g_ayorkor_2007_3/mills_tettey_g_ayorkor_2007_3.pdf | Mills-Tettey, Ayorkor & Stent, Anthony & Dias, M.. (2007). The Dynamic Hungarian Algorithm for the Assignment Problem with Changing Costs.}\n *     - Used to implement primal-dual variables and dynamic updates.\n *\n * 1. {@link https://public.websites.umich.edu/~murty/612/612slides4.pdf | Murty, K. G.. Primal-Dual Algorithms. [IOE 612, Lecture slides 4]. Department of Industrial and Operations Engineering, University of Michigan.}\n *     - Used to implement primal-dual and slack variables.\n */\nexport function exec(matrix: MatrixLike<number>): Matching<number>;\nexport function exec(matrix: MatrixLike<bigint>): Matching<bigint>;\nexport function exec<T extends number | bigint>(\n  matrix: MatrixLike<T>\n): Matching<T> {\n  return (\n    isBigInt((matrix[0] ?? [])[0])\n      ? bigExec(matrix as MatrixLike<bigint>)\n      : numExec(matrix as MatrixLike<number>)\n  ) as Matching<T>;\n}\n\nexport function zeroUncoveredMin<T extends number | bigint>(\n  min: number,\n  slack: MutableArrayLike<number>,\n  slackV: ArrayLike<T>\n): number {\n  const max = slack.length;\n\n  let mid = min + 1;\n  let minZ = slack[min];\n  for (let i = mid; i < max; ++i) {\n    const z = slack[i];\n    if (slackV[z] > slackV[minZ]) {\n      continue;\n    }\n    if (slackV[z] < slackV[minZ]) {\n      minZ = z;\n      mid = min;\n    }\n    slack[i] = slack[mid];\n    slack[mid++] = z;\n  }\n\n  return mid;\n}\n","import { Matching } from \"../types/matching\";\nimport { Pair } from \"../types/pair\";\nimport { entries } from \"./arrayLike\";\nimport { flipH } from \"./matrix\";\n\n/**\n * Converts a matching object into an array of matched indices.\n *\n * @param matching - The matching to convert.\n *\n * @returns An array of pairs where each pair\n * `[r, c]` indicates a match between row `r` and column `c`.\n *\n * @example\n * ```typescript\n * const matching = {\n *   // ...\n *   starsY: [2, 0],\n *   starsX: [2, -1, 0]\n * };\n *\n * const pairs = toPairs(matching);\n * // pairs: [[0, 2], [1, 0]]\n * ```\n */\nexport function toPairs<T>(matching: Matching<T>): Pair<number>[] {\n  // If Y <= X\n  if (matching.starsY.length <= matching.starsX.length) {\n    return entries(matching.starsY);\n  }\n\n  // If Y > X\n  const pairs = entries(matching.starsX);\n  flipH(pairs);\n  return pairs;\n}\n","import { MatrixLike } from \"./types/matrixLike\";\nimport { Pair } from \"./types/pair\";\n\nimport { exec } from \"./core/munkres\";\nimport { toPairs } from \"./utils/matching\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n */\nexport function munkres(costMatrix: MatrixLike<number>): Pair<number>[];\nexport function munkres(costMatrix: MatrixLike<bigint>): Pair<number>[];\nexport function munkres<T extends number | bigint>(\n  costMatrix: MatrixLike<T>\n): Pair<number>[] {\n  return toPairs(exec(costMatrix as MatrixLike<number>));\n}\n"],"names":["getMax","matrix","Y","X","_a","max","y","row","x","getMin","min","create","rows","columns","callbackFn","mat","flipH","from","dupe","rowA","rowB","gen","cols","r","invert","bigVal","negate","copyMatrix","createMatrix","genMatrix","getMatrixMax","getMatrixMin","invertMatrix","negateMatrix","isBigInt","value","entries","array","N","out","i","step4B","unmatched","dualX","dualY","starsX","starsY","slack","slackV","slackX","rootX","zeros","initStageB","steps","ds","dx","zeroUncoveredMin","step6B","step5B","primeY","sy","sum","exec","step1","stars","steps2To3","step4","step4b","dy","S","slackY","rootY","initStage","step6","step5","primeX","sx","bigExec","numExec","mid","minZ","z","toPairs","matching","pairs","munkres","costMatrix"],"mappings":"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"}