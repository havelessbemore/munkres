{"version":3,"file":"munkres.min.cjs","sources":["../../src/utils/array.ts","../../src/utils/is.ts","../../src/utils/matrix.ts","../../src/utils/costMatrix.ts","../../src/utils/munkres.ts","../../src/utils/bigMunkres.ts","../../src/munkres.ts"],"sourcesContent":["/**\n * Find the minimum value in a given array.\n *\n * @param array - An array of numbers.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n *\n * @example\n * const array = [3, 1, 2];\n * console.log(getMin(array)); // Output: 1\n *\n * @example\n * const array = [3n, 1n, 2n];\n * console.log(getMin(array)); // Output: 1n\n *\n * @example\n * const array = ['d', 'b', 'c'];\n * console.log(getMin(array)); // Output: 'b'\n */\nexport function getMin(array: number[]): number | undefined;\nexport function getMin(array: bigint[]): bigint | undefined;\nexport function getMin(array: string[]): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","/**\n * Checks if the given value is of type `bigint`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `bigint`, `false` otherwise.\n *\n * @example\n * console.log(isBigInt(10n)); // true\n *\n * @example\n * console.log(isBigInt(10)); // false\n */\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n/**\n * Checks if the given value is of type `number`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `number`, `false` otherwise.\n *\n * @example\n * console.log(isNumber(10)); // true\n *\n * @example\n * console.log(isNumber(10n)); // false\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n","import { Matrix } from \"../types/matrix\";\n\nimport { getMin as getRowMin } from \"./array\";\nimport { isBigInt } from \"./is\";\n\n/**\n * Creates a copy of a given matrix.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the input matrix.\n */\nexport function copy<T>(matrix: Matrix<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    dupe[y] = Array.from(matrix[y]);\n  }\n  return dupe;\n}\n\n/**\n * Creates a matrix with specified rows and columns.\n *\n * The callback function is called for every combination of elements from the\n * `rows` and `columns` arrays, receiving the current row and column elements\n * as arguments, and its return value is used to populate the matrix.\n *\n * @param rows - An array of row elements.\n * @param columns - An array of column elements.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row element and a column element as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = [1, 2];\n * const cols = ['a', 'b', 'c'];\n * const callbackFn = (row, col) => `${row}${col}`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['1a', '1b', '1c'],\n * //   ['2a', '2b', '2c']\n * // ]\n */\nexport function create<R, C, T>(\n  rows: R[],\n  columns: C[],\n  callbackFn: (row: R, col: C) => T\n): Matrix<T> {\n  const Y = rows.length;\n  const X = columns.length;\n  const mat = new Array<T[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<T>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = callbackFn(rows[y], columns[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Flips a matrix horizontally.\n *\n * After the flip, the element at position `[y][x]` moves to `[y][M-x-1]`,\n * where `M` is the number of columns in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipH(matrix);\n * // matrix is now:\n * // [\n * //   [3, 2, 1],\n * //   [6, 5, 4],\n * //   [9, 8, 7]\n * // ]\n */\nexport function flipH<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].reverse();\n  }\n}\n\n/**\n * Flips a matrix vertically.\n *\n * After the flip, the element at position `[y][x]` moves to `[N-y-1][x]`,\n * where `N` is the number of rows in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipV(matrix);\n * // matrix is now:\n * // [\n * //   [7, 8, 9],\n * //   [4, 5, 6],\n * //   [1, 2, 3]\n * // ]\n */\nexport function flipV<T>(matrix: Matrix<T>): void {\n  matrix.reverse();\n}\n\n/**\n * Finds the minimum value in a given column of a matrix.\n *\n * If the matrix is empty, the column is out of bounds, or\n * the function otherwise cannot determine a minimum value,\n * then `undefined` is returned.\n *\n * @param matrix - The matrix to search.\n * @param col - The zero-based column index for the matrix.\n *\n * @returns The minimum value in the given matrix column,\n * or `undefined` if a minimum could not be found.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getColMin(matrix, 1)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getColMin(matrix, 2)); // Output: 2n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getColMin(matrix, 0)); // Output: 'b'\n */\nexport function getColMin(\n  matrix: Matrix<number>,\n  col: number\n): number | undefined;\nexport function getColMin(\n  matrix: Matrix<bigint>,\n  col: number\n): bigint | undefined;\nexport function getColMin(\n  matrix: Matrix<string>,\n  col: number\n): string | undefined;\nexport function getColMin<T extends number | bigint | string>(\n  matrix: Matrix<T>,\n  x: number\n): T | undefined {\n  const Y = matrix.length;\n  if (Y <= 0 || x < 0 || x >= matrix[0].length) {\n    return undefined;\n  }\n\n  let min = matrix[0][x];\n  for (let y = 1; y < Y; ++y) {\n    if (min > matrix[y][x]) {\n      min = matrix[y][x];\n    }\n  }\n\n  return min;\n}\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMax(matrix)); // Output: 8\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMax(matrix)); // Output: 8n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMax(matrix)); // Output: 'i'\n */\nexport function getMax(matrix: Matrix<number>): number | undefined;\nexport function getMax(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMax(matrix: Matrix<string>): string | undefined;\nexport function getMax<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMin(matrix)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMin(matrix)); // Output: 0n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMin(matrix)); // Output: 'a'\n */\nexport function getMin(matrix: Matrix<number>): number | undefined;\nexport function getMin(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMin(matrix: Matrix<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Inverts the values in a given matrix by\n * subtracting each element from a given large value.\n *\n * @param matrix - The matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, uses the maximum value in the matrix.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * invert(matrix);\n * // matrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const matrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * invert(matrix, 50);\n * // matrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invert(matrix: Matrix<number>, bigVal?: number): void;\nexport function invert(matrix: Matrix<bigint>, bigVal?: bigint): void;\nexport function invert<T extends number | bigint>(\n  matrix: Matrix<T>,\n  bigVal?: T\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? (getMax(matrix as Matrix<number>)! as T);\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = (bigVal - row[x]) as T;\n    }\n  }\n}\n\n/**\n * Checks if a given matrix is square. A square matrix has an equal number\n * of rows and columns.\n *\n * @param matrix - The matrix to check.\n *\n * @returns `true` if the matrix is square, `false` otherwise.\n *\n * @example\n * console.log(isSquare([\n *   [1, 2],\n *   [3, 4]\n * ])); // Output: true\n *\n * @example\n * console.log(isSquare([\n *    [1, 2, 3],\n *    [4, 5, 6]\n * ])); // Output: false\n */\nexport function isSquare<T>(matrix: Matrix<T>): boolean {\n  return matrix.length == (matrix[0]?.length ?? 0);\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn - A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(map(matrix, v =\\> v * v));\n * // Output: [\n * //   [ 1,  9,  4],\n * //   [16,  0, 36],\n * //   [49, 25, 64]\n * // ]\n */\nexport function map<A, B>(\n  matrix: Matrix<A>,\n  callbackFn: (value: A, y: number, x: number, matrix: Matrix<A>) => B\n): Matrix<B> {\n  const Y = matrix.length;\n  const out: Matrix<B> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n\n/**\n * Negates the values in a given matrix.\n *\n * @param matrix - The matrix to be negated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * negate(matrix);\n * // matrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negate(matrix: Matrix<number>): void;\nexport function negate(matrix: Matrix<bigint>): void;\nexport function negate(matrix: Matrix<number | bigint>): void;\nexport function negate<T extends number | bigint>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x] as T;\n    }\n  }\n}\n\n/**\n * Pads a matrix to a specified size with a given fill value.\n *\n * The padding is applied from the ends (right) of each row and\n * the ends (bottom) of each column. If a dimension is already\n * at or above the desired value, no change is made to it.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value used for padding.\n */\nexport function pad<T>(\n  matrix: Matrix<T>,\n  height: number,\n  width: number,\n  fillValue: T\n): void {\n  padHeight(matrix, height, fillValue);\n  padWidth(matrix, width, fillValue);\n}\n\n/**\n * Pads the height (number of rows) of a matrix with a given fill value.\n *\n * Rows are added to the end (bottom) of the matrix until its height reaches\n * `height`, with each new row filled with `fillValue`. If the matrix is\n * already at or above `height`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param fillValue - The value to use for filling new rows.\n */\nexport function padHeight<T>(\n  matrix: Matrix<T>,\n  height: number,\n  fillValue: T\n): void {\n  const Y = matrix.length;\n  if (Y >= height) {\n    return;\n  }\n\n  matrix.length = height;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = Y; y < height; ++y) {\n    matrix[y] = new Array<T>(X).fill(fillValue);\n  }\n}\n\n/**\n * Pads the width (number of columns) of a matrix with a given fill value.\n *\n * Columns are added to the right of the matrix until its width reaches\n * `width`, with each new column filled with `fillValue`. If the matrix is\n * already at or above `width`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value to use for filling new columns.\n */\nexport function padWidth<T>(\n  matrix: Matrix<T>,\n  width: number,\n  fillValue: T\n): void {\n  const X = matrix[0]?.length ?? 0;\n  if (X >= width) {\n    return;\n  }\n\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].length = width;\n    matrix[y].fill(fillValue, X, width);\n  }\n}\n\n/**\n * Performs column-wise reduction on a given matrix.\n *\n * Each column of the matrix is reduced by subtracting the minimum value\n * in the column from every value in the column.\n *\n * @param matrix - The matrix. Modified in place.\n *\n * @example\n * const matrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * reduceCols(matrix);\n * // matrix now:\n * // [\n * //   [2, 1, 1],\n * //   [0, 0, 3],\n * //   [1, 2, 0]\n * // ]\n */\nexport function reduceCols(matrix: Matrix<number>): void;\nexport function reduceCols(matrix: Matrix<bigint>): void;\nexport function reduceCols(matrix: Matrix<number> | Matrix<bigint>): void;\nexport function reduceCols<T extends number | bigint>(matrix: Matrix<T>): void {\n  // If matrix is empty\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (X <= 0) {\n    return;\n  }\n\n  // For each column\n  for (let x = 0; x < X; ++x) {\n    // Find the min\n    const min = getColMin(matrix as Matrix<number>, x)! as T;\n\n    // Subtract the min\n    if (isBigInt(min) || isFinite(min)) {\n      for (let y = 0; y < Y; ++y) {\n        matrix[y][x] = (matrix[y][x] - min) as T;\n      }\n    } else {\n      for (let y = 0; y < Y; ++y) {\n        matrix[y][x] = (matrix[y][x] == min ? 0 : Infinity) as T;\n      }\n    }\n  }\n}\n\n/**\n * Performs row-wise reduction on a given matrix.\n *\n * Each row of the matrix is reduced by subtracting the minimum value\n * in the row from every value in the row.\n *\n * @param matrix - The matrix. Modified in place.\n *\n * @example\n * const matrix = [\n *   [4, 1, 3],\n *   [2, 0, 5],\n *   [3, 2, 2]\n * ];\n *\n * reduceRows(matrix);\n * // matrix is now:\n * // [\n * //   [3, 0, 2],\n * //   [2, 0, 5],\n * //   [1, 0, 0]\n * // ]\n */\nexport function reduceRows(matrix: Matrix<number>): void;\nexport function reduceRows(matrix: Matrix<bigint>): void;\nexport function reduceRows(matrix: Matrix<number> | Matrix<bigint>): void;\nexport function reduceRows<T extends number | bigint>(matrix: Matrix<T>): void {\n  // For each row\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    // Find the min\n    const row = matrix[y];\n    const min = getRowMin(row);\n\n    // If row is empty\n    if (min == null) {\n      continue;\n    }\n\n    // Subtract the min\n    const X = row.length;\n    if (isBigInt(min) || isFinite(min)) {\n      for (let x = 0; x < X; ++x) {\n        row[x] = (row[x] - min) as T;\n      }\n    } else {\n      for (let x = 0; x < X; ++x) {\n        row[x] = (row[x] == min ? 0 : Infinity) as T;\n      }\n    }\n  }\n}\n\n/**\n * Rotates a matrix by 90 degrees clockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 1],\n * //   [4, 2]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [4, 1],\n * //   [5, 2],\n * //   [6, 3]\n * // ]\n */\nexport function rot90<T>(matrix: Matrix<T>): void {\n  flipV(matrix);\n  transpose(matrix);\n}\n\n/**\n * Rotates a matrix by 90 degrees counterclockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [2, 4],\n * //   [1, 3]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 6],\n * //   [2, 5],\n * //   [1, 4]\n * // ]\n */\nexport function rotNeg90<T>(matrix: Matrix<T>): void {\n  transpose(matrix);\n  flipV(matrix);\n}\n\n/**\n * Generates a string representation of a matrix.\n *\n * @param mat - The matrix.\n *\n * @returns A string representation of the matrix.\n */\nexport function toString<T>(mat: Matrix<T>): string {\n  const strs: Matrix<string> = map(mat, v => `${v}`);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // For each column\n  for (let x = 0; x < X; ++x) {\n    // Get width\n    let width = 0;\n    for (let y = 0; y < Y; ++y) {\n      width = Math.max(width, strs[y][x].length);\n    }\n\n    // Adjust width\n    for (let y = 0; y < Y; ++y) {\n      strs[y][x] = strs[y][x].padStart(width, \" \");\n    }\n  }\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n\n  // Return output\n  return buf.join(\",\\n\");\n}\n\n/**\n * Transpose a given matrix, switching its rows and columns.\n *\n * In the transposed matrix, the value originally at position [y][x]\n * moves to [x][y], effectively turning rows of the original matrix into\n * columns in the output matrix, and vice versa.\n *\n * @param matrix - The matrix to transpose. Modified in place.\n *\n * @example\n * // Transpose a 2x3 matrix to a 3x2 matrix\n * const original = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * transpose(original);\n * // transposed is now:\n * // [\n * //   [1, 4],\n * //   [2, 5],\n * //   [3, 6]\n * // ]\n */\nexport function transpose<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose shared square\n  const N = Math.min(Y, X);\n  for (let y = 1; y < N; ++y) {\n    for (let x = 0; x < y; ++x) {\n      const temp = matrix[y][x];\n      matrix[y][x] = matrix[x][y];\n      matrix[x][y] = temp;\n    }\n  }\n\n  // Add columns\n  if (Y > X) {\n    for (let y = 0; y < X; ++y) {\n      matrix[y].length = Y;\n      for (let x = X; x < Y; ++x) {\n        matrix[y][x] = matrix[x][y];\n      }\n    }\n    matrix.length = X;\n  }\n\n  // Add rows\n  if (Y < X) {\n    matrix.length = X;\n    for (let y = Y; y < X; ++y) {\n      matrix[y] = new Array(Y);\n      for (let x = 0; x < Y; ++x) {\n        matrix[y][x] = matrix[x][y];\n      }\n    }\n    for (let y = 0; y < Y; ++y) {\n      matrix[y].length = Y;\n    }\n  }\n}\n","import { Matrix } from \"..\";\nimport { create, getMax, getMin, invert, negate } from \"./matrix\";\n\n/**\n * Constructs a cost matrix for a set of\n * workers and jobs using a provided cost function.\n *\n * Each element of the matrix represents the cost associated with assigning a\n * specific worker to a specific job. The cost is determined by `costFn`,\n * which computes the cost based on a worker-job pair.\n *\n * @param workers - An array of workers.\n * @param jobs - An array of jobs.\n * @param costFn - Given a worker and a job, returns the\n * numeric cost of assigning that worker to that job.\n *\n * @returns A cost matrix where the values at position `[y][x]`\n * represent the cost of assigning the `y`-th worker to the `x`-th job.\n *\n * @example\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) =\\> worker.length + job.length;\n *\n * // Create the cost matrix\n * const matrix = createCostMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n */\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => number\n): Matrix<number>;\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => bigint\n): Matrix<bigint>;\nexport function createCostMatrix<W, J, T extends number | bigint>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => T\n): Matrix<T> {\n  return create(workers, jobs, costFn);\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMaxCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMaxCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMaxCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMax(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMinCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMinCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMinCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMin(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Inverts the values in a given cost matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const costMatrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const anotherMatrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertCostMatrix(anotherMatrix, 50);\n *\n * // costMatrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertCostMatrix(\n  costMatrix: Matrix<number>,\n  bigVal?: number\n): void;\nexport function invertCostMatrix(\n  costMatrix: Matrix<bigint>,\n  bigVal?: bigint\n): void;\nexport function invertCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>,\n  bigVal?: T\n): void {\n  invert(costMatrix as Matrix<number>, bigVal as number);\n}\n\n/**\n * Negates the values in a given cost matrix.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be negated. Modified in place.\n *\n * @example\n * const costMatrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the cost matrix\n * negateCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateCostMatrix(costMatrix: Matrix<number>): void;\nexport function negateCostMatrix(costMatrix: Matrix<bigint>): void;\nexport function negateCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): void {\n  negate(costMatrix);\n}\n","import { Matrix } from \"..\";\nimport { reduceCols, reduceRows } from \"./matrix\";\nimport { map } from \"./matrix\";\n\n/**\n * Displays the current step of the algorithm and the state of the cost matrix.\n *\n * @param step - The current step of the algorithm.\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n */ /*\nexport function debug(\n  step: string,\n  mat: Matrix<number>,\n  primeY: number[],\n  starY: number[]\n): void {\n  console.log(\"%s:\\n\\n%s\\n\", step, toString(mat, starY, primeY));\n}\n*/\n\n/**\n * Searches for an uncovered zero in the matrix and returns its coordinates.\n * If not found, the coordinates of the smallest uncovered value are returned\n * instead.\n *\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @returns The coordinates of an uncovered zero, if found.\n * Otherwise, the coordinates to the smallest uncovered value.\n */\nexport function findUncoveredZeroOrMin(\n  mat: Matrix<number>,\n  primeY: number[],\n  starX: number[]\n): [number, number] {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  let minX = -1;\n  let minY = -1;\n  let minV = undefined as unknown as number;\n\n  // For each cell\n  for (let y = 0; y < Y; ++y) {\n    // Skip if the row is covered\n    if (primeY[y] >= 0) {\n      continue;\n    }\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      // Skip if the column is covered\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        continue;\n      }\n      // Return immediately if a zero is found\n      if (vals[x] == 0) {\n        return [y, x];\n      }\n      // Track the smallest uncovered value\n      if (!(minV <= vals[x])) {\n        minV = vals[x];\n        minX = x;\n        minY = y;\n      }\n    }\n  }\n\n  // Return the smallest value's coordinates\n  return [minY, minX];\n}\n\n/**\n * Reduces the given cost matrix by performing row-wise and column-wise\n * reductions.\n *\n * This is a preprocessing step to simplify the matrix\n * and improve the efficiency of subsequent steps.\n *\n * @param mat - The cost matrix. Modified in place.\n */\nexport function step1(mat: Matrix<number> | Matrix<bigint>): void {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n\n  if (Y <= X) {\n    reduceRows(mat);\n  }\n\n  if (Y >= X) {\n    reduceCols(mat);\n  }\n}\n\n/**\n * Performs the initial steps of searching for zeros in the cost matrix to\n * \"star\", then returns the number of stars made.\n *\n * A star indicates a potential part of the optimal solution. Each star is\n * the only one in its row and column.\n *\n * @param mat - The cost matrix.\n * @param starX - An array tracking the star status of columns.\n * @param starY - An array tracking the star status of rows.\n *\n * @returns The number of stars made.\n */\nexport function steps2To3(\n  mat: Matrix<number>,\n  starX: number[],\n  starY: number[]\n): number {\n  const X = starX.length;\n  const Y = starY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (vals[x] == 0 && starX[x] < 0) {\n        starX[x] = y;\n        starY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Find and augment assignments until an optimal set is found.\n *\n * It attempts to either find an uncovered zero to star or adjusts\n * the matrix to create more zeros if none found. If an uncovered zero is\n * found but cannot be starred due to conflicts (i.e., another star in the\n * same row or column), it primes the zero and possibly adjusts existing\n * stars to resolve the conflict, thereby augmenting the current set of\n * assignments. This process is repeated until there are as many stars as\n * there are columns in the matrix, at which point optimal assignments\n * have been found.\n *\n * @param mat - An NxM cost matrix. Modified in place.\n *\n * @throws - {@link RangeError}\n * Thrown if the given NxM matrix has more columns than rows (N > M).\n *\n * @privateRemarks\n * Based on {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | this outline}\n * and enhanced with custom optimizations.\n */\nexport function step4(mat: Matrix<number>): number[] {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n\n  // Check input\n  if (Y > X) {\n    throw new RangeError(\"invalid NxM matrix: N > M\");\n  }\n\n  const starX = new Array<number>(X).fill(-1);\n  const starY = new Array<number>(Y).fill(-1);\n  const primeY = new Array<number>(Y).fill(-1);\n\n  // Step 1: Reduce\n  step1(mat);\n\n  // Steps 2 & 3: Find initial stars\n  let stars = steps2To3(mat, starX, starY);\n\n  // Step 4: Find optimal assignments\n  while (stars < Y) {\n    // Find an uncovered zero or the uncovered min\n    const [y, x] = findUncoveredZeroOrMin(mat, primeY, starX);\n\n    // Step 6: If no zero found, create a zero(s) from the min\n    if (mat[y][x] != 0) {\n      step6(mat[y][x], mat, primeY, starX);\n    }\n\n    // Prime the zero / cover the row\n    primeY[y] = x;\n\n    // Step 5: If no star in the prime's row, turn primes into stars\n    if (starY[y] < 0) {\n      step5(y, primeY, starX, starY);\n      primeY.fill(-1);\n      ++stars;\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starY;\n}\n\n/**\n * Given a prime, walks an alternating path to a star in the prime's column\n * and then a prime in the star's row, starring each prime and removing each\n * star along the way. The path continues until a star cannot be found.\n *\n * This step effectively increases the number of independent zeros (stars)\n * in the matrix, bringing the algorithm closer to an optimal assignment.\n *\n * @param y - The starting prime's y coordinate.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n * @param starY - An array of star y coordinates to x coordinates.\n */\nexport function step5(\n  y: number,\n  primeY: number[],\n  starX: number[],\n  starY: number[]\n): void {\n  // Sanity check\n  if (primeY[y] < 0) {\n    throw new Error(\"Input must be prime.\");\n  }\n\n  do {\n    // Mark prime as a star\n    const x = primeY[y];\n    const sy = starX[x];\n    starX[x] = y;\n    starY[y] = x;\n\n    // Move to next prime\n    y = sy;\n  } while (y >= 0);\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros.\n *\n * The matrix is modified by adding a given value to every element of covered\n * rows, and subtracting `Infinity` from every element of uncovered columns.\n * If an element's row is covered and column is uncovered, no change is made.\n *\n * @param min - The value to adjust the matrix by.\n * Should be the minimum uncovered value (see {@link step4}).\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n */\nexport function step6(\n  min: number,\n  mat: Matrix<number>,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  // If min is Infinity\n  if (!isFinite(min)) {\n    return step6Inf(mat, primeY, starX);\n  }\n\n  // For each cell\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          // The cell's column and row are covered\n          vals[x] += min;\n        }\n      } else if (primeY[y] < 0) {\n        // The cell's column and row are uncovered\n        vals[x] -= min;\n      }\n    }\n  }\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros, specifically\n * when adjusting by Infinity.\n *\n * The matrix is modified by adding `Infinity` to every element of covered\n * rows, and subtracting `Infinity` from every element of uncovered columns.\n * If an element's row is covered and column is uncovered, no change is made.\n *\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @remarks\n *\n * This variation of step 6 is used when the minimum uncovered value\n * (see {@link step4}) is `Infinity`, as normal subtraction of `Infinity`\n * from `Infinity` equals `NaN`.\n */\nexport function step6Inf(\n  mat: Matrix<number>,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  // For each cell\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          // The cell's column and row are covered\n          vals[x] += Infinity;\n        }\n      } else if (primeY[y] < 0) {\n        // The cell's column and row are uncovered\n        vals[x] = 0;\n      }\n    }\n  }\n}\n\n/**\n * Generates a string representation of the cost matrix,\n * annotating starred (*) and primed (\") elements.\n *\n * Stars (*) indicate part of a potential solution, while primes (\") mark\n * elements considered for augmenting the current solution. This visualization\n * aids in understanding and debugging the matrix's state at various steps of\n * the algorithm.\n *\n * @param mat - The cost matrix.\n * @param starY - An array of star y coordinates to x coordinates.\n * @param primeY - (Optional) An array of prime y coordinates to x coordinates.\n *\n * @returns A string visualization of the matrix with stars and primes.\n */\nexport function toString(\n  mat: Matrix<number>,\n  starY: number[],\n  primeY: number[] = []\n): string {\n  const strs: Matrix<string> = map(mat, v => `${v}`);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // Mark values as stars or primes\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    if (starY[y] >= 0) {\n      row[starY[y]] = \"*\" + row[starY[y]];\n    }\n    if (primeY[y] >= 0) {\n      row[primeY[y]] = '\"' + row[primeY[y]];\n    }\n  }\n\n  // Get column width\n  let width = 0;\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      width = Math.max(width, strs[y][x].length);\n    }\n  }\n\n  // Adjust widths\n  for (let y = 0; y < Y; ++y) {\n    const row = strs[y];\n    for (let x = 0; x < X; ++x) {\n      if (row[x].length < width) {\n        row[x] = row[x].padStart(width, \" \");\n      }\n    }\n  }\n\n  /*\n\n  // Create starX\n  const starX: number[] = new Array(X).fill(-1);\n  for (let y = 0; y < Y; ++y) {\n    if (starY[y] >= 0) {\n      starX[starY[y]] = y;\n    }\n  }\n  \n  // Mark values as covered\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          strs[y][x] = `⫢${strs[y][x]}⫤`;\n        } else {\n          strs[y][x] = `|${strs[y][x]}|`;\n        }\n      } else if (primeY[y] >= 0) {\n        strs[y][x] = `=${strs[y][x]}=`;\n      } else {\n        strs[y][x] = ` ${strs[y][x]} `;\n      }\n    }\n  }\n  */\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n  return buf.join(\",\\n\");\n}\n","import { Matrix } from \"..\";\nimport { step1, step5 } from \"./munkres\";\n\n/**\n * Searches for an uncovered zero in the matrix and returns its coordinates.\n * If not found, the coordinates of the smallest uncovered value are returned\n * instead.\n *\n * @param mat - The cost matrix.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n *\n * @returns The coordinates of an uncovered zero, if found.\n * Otherwise, the coordinates to the smallest uncovered value.\n */\nexport function bigFindUncoveredZeroOrMin(\n  mat: Matrix<bigint>,\n  primeY: number[],\n  starX: number[]\n): [number, number] {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  let minX = -1;\n  let minY = -1;\n  let minV = undefined as unknown as bigint;\n\n  // For each cell\n  for (let y = 0; y < Y; ++y) {\n    // Skip if the row is covered\n    if (primeY[y] >= 0) {\n      continue;\n    }\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      // Skip if the column is covered\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        continue;\n      }\n      // Return immediately if a zero is found\n      if (vals[x] == 0n) {\n        return [y, x];\n      }\n      // Track the smallest uncovered value\n      if (!(minV <= vals[x])) {\n        minV = vals[x];\n        minX = x;\n        minY = y;\n      }\n    }\n  }\n\n  // Return the smallest value's coordinates\n  return [minY, minX];\n}\n\n/**\n * Performs the initial steps of searching for zeros in the cost matrix to\n * \"star\", then returns the number of stars made.\n *\n * A star indicates a potential part of the optimal solution. Each star is\n * the only one in its row and column.\n *\n * @param mat - The cost matrix.\n * @param starX - An array tracking the star status of columns.\n * @param starY - An array tracking the star status of rows.\n *\n * @returns The number of stars made.\n */\nexport function bigSteps2To3(\n  mat: Matrix<bigint>,\n  starX: number[],\n  starY: number[]\n): number {\n  const X = starX.length;\n  const Y = starY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (vals[x] == 0n && starX[x] < 0) {\n        starX[x] = y;\n        starY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Find and augment assignments until an optimal set is found.\n *\n * It attempts to either find an uncovered zero to star or adjusts\n * the matrix to create more zeros if none found. If an uncovered zero is\n * found but cannot be starred due to conflicts (i.e., another star in the\n * same row or column), it primes the zero and possibly adjusts existing\n * stars to resolve the conflict, thereby augmenting the current set of\n * assignments. This process is repeated until there are as many stars as\n * there are columns in the matrix, at which point optimal assignments\n * have been found.\n *\n * @param mat - An NxM cost matrix. Modified in place.\n *\n * @throws - {@link RangeError}\n * Thrown if the given NxM matrix has more columns than rows (N > M).\n *\n * @privateRemarks\n * Based on {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | this outline}\n * and enhanced with custom optimizations.\n */\nexport function bigStep4(mat: Matrix<bigint>): number[] {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n\n  // Check input\n  if (Y > X) {\n    throw new RangeError(\"invalid NxM matrix: N > M\");\n  }\n\n  const starX = new Array<number>(X).fill(-1);\n  const starY = new Array<number>(Y).fill(-1);\n  const primeY = new Array<number>(Y).fill(-1);\n\n  // Step 1: Reduce\n  step1(mat);\n\n  // Steps 2 & 3: Find initial stars\n  let stars = bigSteps2To3(mat, starX, starY);\n\n  // Step 4: Find optimal assignments\n  while (stars < Y) {\n    // Find an uncovered zero or the uncovered min\n    const [y, x] = bigFindUncoveredZeroOrMin(mat, primeY, starX);\n\n    // Step 6: If no zero found, create a zero(s) from the min\n    if (mat[y][x] != 0n) {\n      bigStep6(mat[y][x], mat, primeY, starX);\n    }\n\n    // Prime the zero / cover the row\n    primeY[y] = x;\n\n    // Step 5: If no star in the prime's row, turn primes into stars\n    if (starY[y] < 0) {\n      step5(y, primeY, starX, starY);\n      primeY.fill(-1);\n      ++stars;\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starY;\n}\n\n/**\n * Adjusts a cost matrix to uncover more zeros.\n *\n * The matrix is modified by adding a given value to every element of covered\n * rows, and subtracting `Infinity` from every element of uncovered columns.\n * If an element's row is covered and column is uncovered, no change is made.\n *\n * @param min - The value to adjust the matrix by.\n * Should be the minimum uncovered value (see {@link step4}).\n * @param mat - The cost matrix. Modified in place.\n * @param primeY - An array of prime y coordinates to x coordinates.\n * @param starX - An array of star x coordinates to y coordinates.\n */\nexport function bigStep6(\n  min: bigint,\n  mat: Matrix<bigint>,\n  primeY: number[],\n  starX: number[]\n): void {\n  const X = starX.length;\n  const Y = primeY.length;\n\n  // For each cell\n  for (let y = 0; y < Y; ++y) {\n    const vals = mat[y];\n    for (let x = 0; x < X; ++x) {\n      if (starX[x] >= 0 && primeY[starX[x]] < 0) {\n        if (primeY[y] >= 0) {\n          // The cell's column and row are covered\n          vals[x] += min;\n        }\n      } else if (primeY[y] < 0) {\n        // The cell's column and row are uncovered\n        vals[x] -= min;\n      }\n    }\n  }\n}\n","import { Matrix } from \".\";\nimport { bigStep4 } from \"./utils/bigMunkres\";\nimport { isBigInt } from \"./utils/is\";\nimport { copy, flipH, transpose } from \"./utils/matrix\";\nimport { step4 } from \"./utils/munkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n *\n * @remarks\n * Runs the {@link https://en.wikipedia.org/wiki/Hungarian_algorithm | Munkres algorithm (aka Hungarian algorithm)} to solve\n * the {@link https://en.wikipedia.org/wiki/Assignment_problem | assignment problem}.\n */\nexport function munkres(costMatrix: Matrix<number>): [number, number][];\nexport function munkres(costMatrix: Matrix<bigint>): [number, number][];\nexport function munkres<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): [number, number][] {\n  // Get dimensions\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n\n  // If matrix is empty\n  if (X <= 0) {\n    return [];\n  }\n\n  // Make a copy\n  costMatrix = copy(costMatrix);\n\n  // Transpose if Y > X\n  if (Y > X) {\n    transpose(costMatrix);\n  }\n\n  // Get optimal assignments\n  const y2x = isBigInt(costMatrix[0][0])\n    ? bigStep4(costMatrix as Matrix<bigint>)\n    : step4(costMatrix as Matrix<number>);\n\n  // Create pairs\n  const P = y2x.length;\n  const pairs: [number, number][] = new Array(P);\n  for (let y = 0; y < P; ++y) {\n    pairs[y] = [y, y2x[y]];\n  }\n\n  // Transpose if Y > X\n  if (Y > X) {\n    flipH(pairs);\n  }\n\n  // Return assignments\n  return pairs;\n}\n"],"names":["getMin","array","N","min","i","isBigInt","value","copy","matrix","Y","dupe","y","create","rows","columns","callbackFn","X","mat","row","x","flipH","getColMin","getMax","_a","max","invert","bigVal","negate","reduceCols","reduceRows","getRowMin","transpose","temp","createCostMatrix","workers","jobs","costFn","getMaxCost","costMatrix","getMinCost","invertCostMatrix","negateCostMatrix","findUncoveredZeroOrMin","primeY","starX","minX","minY","minV","vals","step1","steps2To3","starY","stars","step4","step6","step5","sy","step6Inf","bigFindUncoveredZeroOrMin","bigSteps2To3","bigStep4","bigStep6","munkres","y2x","P","pairs"],"mappings":"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"}