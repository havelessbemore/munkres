{"version":3,"file":"munkres.min.mjs","sources":["../../src/utils/matrix.ts","../../src/utils/costMatrix.ts","../../src/utils/array.ts","../../src/utils/is.ts","../../src/utils/munkres/numMunkres.ts","../../src/utils/munkres/bigMunkres.ts","../../src/utils/munkres/munkres.ts","../../src/munkres.ts"],"sourcesContent":["import { Matrix } from \"../types/matrix\";\n\n/**\n * Creates a copy of a given matrix.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the input matrix.\n */\nexport function copy<T>(matrix: Matrix<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    dupe[y] = matrix[y].slice(0);\n  }\n  return dupe;\n}\n\n/**\n * Creates a matrix with specified rows and columns.\n *\n * The callback function is called for every combination of elements from the\n * `rows` and `columns` arrays, receiving the current row and column elements\n * as arguments, and its return value is used to populate the matrix.\n *\n * @param rows - An array of row elements.\n * @param columns - An array of column elements.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row element and a column element as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = [1, 2];\n * const cols = ['a', 'b', 'c'];\n * const callbackFn = (row, col) =\\> `${row}${col}`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['1a', '1b', '1c'],\n * //   ['2a', '2b', '2c']\n * // ]\n */\nexport function create<R, C, T>(\n  rows: R[],\n  columns: C[],\n  callbackFn: (row: R, col: C) => T\n): Matrix<T> {\n  const Y = rows.length;\n  const X = columns.length;\n  const mat = new Array<T[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<T>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = callbackFn(rows[y], columns[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Flips a matrix horizontally.\n *\n * After the flip, the element at position `[y][x]` moves to `[y][M-x-1]`,\n * where `M` is the number of columns in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipH(matrix);\n * // matrix is now:\n * // [\n * //   [3, 2, 1],\n * //   [6, 5, 4],\n * //   [9, 8, 7]\n * // ]\n */\nexport function flipH<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].reverse();\n  }\n}\n\n/**\n * Flips a matrix vertically.\n *\n * After the flip, the element at position `[y][x]` moves to `[N-y-1][x]`,\n * where `N` is the number of rows in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipV(matrix);\n * // matrix is now:\n * // [\n * //   [7, 8, 9],\n * //   [4, 5, 6],\n * //   [1, 2, 3]\n * // ]\n */\nexport function flipV<T>(matrix: Matrix<T>): void {\n  matrix.reverse();\n}\n\n/**\n * Performs the specified action for each element in the matrix.\n *\n * @param matrix - The matrix.\n * @param callbackFn - A function that accepts up to four arguments.\n * It is called one time for each element in the matrix.\n * @param thisArg - An object to which the `this` keyword refers to\n * in the `callbackFn` function. If omitted, `undefined` is used.\n *\n * @example\n * ```javascript\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9],\n * ];\n * forEach(matrix, (value, row, col, mat) => {\n *   console.log(`Value at ${row},${col} is ${value}`);\n * });\n * ```\n */\nexport function forEach<T>(\n  matrix: Matrix<T>,\n  callbackFn: (value: T, y: number, x: number, matrix: Matrix<T>) => void,\n  thisArg?: unknown\n): void {\n  [].forEach;\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return;\n  }\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      callbackFn.call(thisArg, row[x], y, x, matrix);\n    }\n  }\n}\n\n/**\n * Generates a matrix with specified rows and columns.\n *\n * The callback function is called with every combination of row and column indices,\n * and its return value is used to populate the matrix.\n *\n * @param rows - The number of rows.\n * @param columns - The number of columns.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row and column index as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = 2;\n * const cols = 3;\n * const callbackFn = (row, col) =\\> `(${row},${col})`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['(0,0)', '(0,1)', '(0,2)'],\n * //   ['(1,0)', '(1,1)', '(1,2)']\n * // ]\n */\nexport function gen<T>(\n  rows: number,\n  cols: number,\n  callbackFn: (row: number, col: number) => T\n): Matrix<T> {\n  const matrix: Matrix<T> = new Array(rows);\n\n  for (let r = 0; r < rows; ++r) {\n    const row = new Array(cols);\n    for (let c = 0; c < cols; ++c) {\n      row[c] = callbackFn(r, c);\n    }\n    matrix[r] = row;\n  }\n\n  return matrix;\n}\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMax(matrix)); // Output: 8\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMax(matrix)); // Output: 8n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMax(matrix)); // Output: 'i'\n */\nexport function getMax(matrix: Matrix<number>): number | undefined;\nexport function getMax(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMax(matrix: Matrix<string>): string | undefined;\nexport function getMax<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMin(matrix)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMin(matrix)); // Output: 0n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMin(matrix)); // Output: 'a'\n */\nexport function getMin(matrix: Matrix<number>): number | undefined;\nexport function getMin(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMin(matrix: Matrix<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Inverts the values in a given matrix by\n * subtracting each element from a given large value.\n *\n * @param matrix - The matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, uses the maximum value in the matrix.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * invert(matrix);\n * // matrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const matrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * invert(matrix, 50);\n * // matrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invert(matrix: Matrix<number>, bigVal?: number): void;\nexport function invert(matrix: Matrix<bigint>, bigVal?: bigint): void;\nexport function invert<T extends number | bigint>(\n  matrix: Matrix<T>,\n  bigVal?: T\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? (getMax(matrix as Matrix<number>)! as T);\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = (bigVal - row[x]) as T;\n    }\n  }\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn - A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(map(matrix, v =\\> v * v));\n * // Output: [\n * //   [ 1,  9,  4],\n * //   [16,  0, 36],\n * //   [49, 25, 64]\n * // ]\n */\nexport function map<T, R>(\n  matrix: Matrix<T>,\n  callbackFn: (value: T, y: number, x: number, matrix: Matrix<T>) => R\n): Matrix<R> {\n  const Y = matrix.length;\n  const out: Matrix<R> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n\n/**\n * Negates the values in a given matrix.\n *\n * @param matrix - The matrix to be negated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * negate(matrix);\n * // matrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negate(matrix: Matrix<number>): void;\nexport function negate(matrix: Matrix<bigint>): void;\nexport function negate(matrix: Matrix<number | bigint>): void;\nexport function negate<T extends number | bigint>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x] as T;\n    }\n  }\n}\n\n/**\n * Pads a matrix to a specified size with a given fill value.\n *\n * The padding is applied from the ends (right) of each row and\n * the ends (bottom) of each column. If a dimension is already\n * at or above the desired value, no change is made to it.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value used for padding.\n */\nexport function pad<T>(\n  matrix: Matrix<T>,\n  height: number,\n  width: number,\n  fillValue: T\n): void {\n  padHeight(matrix, height, fillValue);\n  padWidth(matrix, width, fillValue);\n}\n\n/**\n * Pads the height (number of rows) of a matrix with a given fill value.\n *\n * Rows are added to the end (bottom) of the matrix until its height reaches\n * `height`, with each new row filled with `fillValue`. If the matrix is\n * already at or above `height`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param fillValue - The value to use for filling new rows.\n */\nexport function padHeight<T>(\n  matrix: Matrix<T>,\n  height: number,\n  fillValue: T\n): void {\n  const Y = matrix.length;\n  if (Y >= height) {\n    return;\n  }\n\n  matrix.length = height;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = Y; y < height; ++y) {\n    matrix[y] = new Array<T>(X).fill(fillValue);\n  }\n}\n\n/**\n * Pads the width (number of columns) of a matrix with a given fill value.\n *\n * Columns are added to the right of the matrix until its width reaches\n * `width`, with each new column filled with `fillValue`. If the matrix is\n * already at or above `width`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value to use for filling new columns.\n */\nexport function padWidth<T>(\n  matrix: Matrix<T>,\n  width: number,\n  fillValue: T\n): void {\n  const X = matrix[0]?.length ?? 0;\n  if (X >= width) {\n    return;\n  }\n\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].length = width;\n    matrix[y].fill(fillValue, X, width);\n  }\n}\n\n/**\n * Rotates a matrix by 90 degrees clockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 1],\n * //   [4, 2]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [4, 1],\n * //   [5, 2],\n * //   [6, 3]\n * // ]\n */\nexport function rot90<T>(matrix: Matrix<T>): void {\n  flipV(matrix);\n  transpose(matrix);\n}\n\n/**\n * Rotates a matrix by 90 degrees counterclockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [2, 4],\n * //   [1, 3]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 6],\n * //   [2, 5],\n * //   [1, 4]\n * // ]\n */\nexport function rotNeg90<T>(matrix: Matrix<T>): void {\n  transpose(matrix);\n  flipV(matrix);\n}\n/**\n * Generates a string representation of a matrix.\n *\n * @param mat - The matrix.\n * @param callbackFn - (Optional) A callback function to convert each element\n * to a string. Defaults to using each elements `toString` method.\n *\n * @returns A string representation of the matrix.\n */\nexport function toString<T>(\n  mat: Matrix<T>,\n  callbackFn: (\n    value: T,\n    row: number,\n    col: number,\n    matrix: Matrix<T>\n  ) => string = v => `${v}`\n): string {\n  const strs: Matrix<string> = map(mat, callbackFn);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // For each column\n  for (let x = 0; x < X; ++x) {\n    // Get width\n    let width = 0;\n    for (let y = 0; y < Y; ++y) {\n      width = Math.max(width, strs[y][x].length);\n    }\n\n    // Adjust width\n    for (let y = 0; y < Y; ++y) {\n      strs[y][x] = strs[y][x].padStart(width, \" \");\n    }\n  }\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n\n  // Return output\n  return buf.join(\",\\n\");\n}\n\n/**\n * Transpose a given matrix, switching its rows and columns.\n *\n * In the transposed matrix, the value originally at position [y][x]\n * moves to [x][y], effectively turning rows of the original matrix into\n * columns in the output matrix, and vice versa.\n *\n * @param matrix - The matrix to transpose. Modified in place.\n *\n * @example\n * // Transpose a 2x3 matrix to a 3x2 matrix\n * const original = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * transpose(original);\n * // transposed is now:\n * // [\n * //   [1, 4],\n * //   [2, 5],\n * //   [3, 6]\n * // ]\n */\nexport function transpose<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose shared square\n  const N = Math.min(Y, X);\n  for (let y = 1; y < N; ++y) {\n    for (let x = 0; x < y; ++x) {\n      const temp = matrix[y][x];\n      matrix[y][x] = matrix[x][y];\n      matrix[x][y] = temp;\n    }\n  }\n\n  // Add columns\n  if (Y > X) {\n    for (let y = 0; y < X; ++y) {\n      const row = matrix[y];\n      row.length = Y;\n      for (let x = X; x < Y; ++x) {\n        row[x] = matrix[x][y];\n      }\n    }\n    matrix.length = X;\n  }\n\n  // Add rows\n  if (Y < X) {\n    matrix.length = X;\n    for (let y = Y; y < X; ++y) {\n      const row = new Array(Y);\n      for (let x = 0; x < Y; ++x) {\n        row[x] = matrix[x][y];\n      }\n      matrix[y] = row;\n    }\n    for (let y = 0; y < Y; ++y) {\n      matrix[y].length = Y;\n    }\n  }\n}\n","import { Matrix } from \"../types/matrix\";\n\nimport { create, getMax, getMin, invert, negate } from \"./matrix\";\n\n/**\n * Constructs a cost matrix for a set of\n * workers and jobs using a provided cost function.\n *\n * Each element of the matrix represents the cost associated with assigning a\n * specific worker to a specific job. The cost is determined by `costFn`,\n * which computes the cost based on a worker-job pair.\n *\n * @param workers - An array of workers.\n * @param jobs - An array of jobs.\n * @param costFn - Given a worker and a job, returns the\n * numeric cost of assigning that worker to that job.\n *\n * @returns A cost matrix where the values at position `[y][x]`\n * represent the cost of assigning the `y`-th worker to the `x`-th job.\n *\n * @example\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) =\\> worker.length + job.length;\n *\n * // Create the cost matrix\n * const matrix = createCostMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n */\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => number\n): Matrix<number>;\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => bigint\n): Matrix<bigint>;\nexport function createCostMatrix<W, J, T extends number | bigint>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => T\n): Matrix<T> {\n  return create(workers, jobs, costFn);\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMaxCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMaxCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMaxCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMax(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMinCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMinCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMinCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMin(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Inverts the values in a given cost matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const costMatrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const anotherMatrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertCostMatrix(anotherMatrix, 50);\n *\n * // costMatrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertCostMatrix(\n  costMatrix: Matrix<number>,\n  bigVal?: number\n): void;\nexport function invertCostMatrix(\n  costMatrix: Matrix<bigint>,\n  bigVal?: bigint\n): void;\nexport function invertCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>,\n  bigVal?: T\n): void {\n  invert(costMatrix as Matrix<number>, bigVal as number);\n}\n\n/**\n * Negates the values in a given cost matrix.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be negated. Modified in place.\n *\n * @example\n * const costMatrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the cost matrix\n * negateCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateCostMatrix(costMatrix: Matrix<number>): void;\nexport function negateCostMatrix(costMatrix: Matrix<bigint>): void;\nexport function negateCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): void {\n  negate(costMatrix);\n}\n","/**\n * Transforms the given array into an array of key, value pairs\n * for every entry in the array.\n *\n * @param array - The array to transform into entries.\n *\n * @returns An array of key, value pairs for every entry in the array.\n *\n * @example\n * entries(['a', 'b', 'c']);\n * // Returns [[0, 'a'], [1, 'b'], [2, 'c']]\n */\nexport function entries<T>(array: T[]): [number, T][] {\n  const N = array.length;\n  const out = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    out[i] = [i, array[i]];\n  }\n  return out;\n}\n\n/**\n * Find the minimum value in a given array.\n *\n * @param array - An array.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n *\n * @example\n * const array = [3, 1, 2];\n * console.log(getMin(array)); // Output: 1\n *\n * @example\n * const array = [3n, 1n, 2n];\n * console.log(getMin(array)); // Output: 1n\n *\n * @example\n * const array = ['d', 'b', 'c'];\n * console.log(getMin(array)); // Output: 'b'\n */\nexport function getMin(array: number[]): number | undefined;\nexport function getMin(array: bigint[]): bigint | undefined;\nexport function getMin(array: string[]): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","/**\n * Checks if the given value is of type `bigint`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `bigint`, `false` otherwise.\n *\n * @example\n * console.log(isBigInt(10n)); // true\n *\n * @example\n * console.log(isBigInt(10)); // false\n */\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n/**\n * Checks if the given value is of type `number`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `number`, `false` otherwise.\n *\n * @example\n * console.log(isNumber(10)); // true\n *\n * @example\n * console.log(isNumber(10n)); // false\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n","import { Matrix } from \"../../types/matrix\";\nimport { MunkresResult } from \"../../types/munkres\";\n\nimport { getMin } from \"../array\";\nimport { toString as _toString, copy, transpose } from \"../matrix\";\n\nexport function safeExec(matrix: Matrix<number>): MunkresResult<number> {\n  // Get dimensions\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose if Y > X\n  if (Y > X) {\n    matrix = copy(matrix);\n    transpose(matrix);\n  }\n\n  // Get optimal assignments\n  return exec(matrix);\n}\n\nexport function exec(matrix: Matrix<number>): MunkresResult<number> {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // If empty matrix\n  if (Y <= 0 || X <= 0) {\n    return { dualX: [], dualY: [], starsX: [], starsY: [] };\n  }\n\n  // If invalid matrix\n  if (Y > X) {\n    throw new RangeError(\"invalid MxN matrix: M > N\");\n  }\n\n  // Step 1: Reduce\n  const dualX = new Array<number>(X);\n  const dualY = new Array<number>(Y);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  const stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Step 4: Find complete matching\n  step4(Y - stars, matrix, dualX, dualY, starsX, starsY);\n\n  // Return matching\n  return { dualX, dualY, starsX, starsY };\n}\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  // Reduce rows\n  for (let y = 0; y < Y; ++y) {\n    dualY[y] = getMin(matrix[y])!;\n  }\n\n  // Reduce columns\n  if (Y < X) {\n    dualX.fill(0);\n    return;\n  }\n\n  let dy = dualY[0];\n  let row = matrix[0];\n  for (let x = 0; x < X; ++x) {\n    dualX[x] = row[x] === dy ? 0 : row[x] - dy;\n  }\n  for (let y = 1; y < Y; ++y) {\n    dy = dualY[y];\n    row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dx = row[x] === dy ? 0 : row[x] - dy;\n      if (dx < dualX[x]) {\n        dualX[x] = dx;\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const dy = -dualY[y];\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dual = dualX[x] === dy ? 0 : dualX[x] - dy;\n      if (starsX[x] === -1 && row[x] === dual) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param unmatched - The number of missing matches.\n * @param mat - An MxN cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step4(\n  unmatched: number,\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const X = dualX.length;\n  const Y = dualY.length;\n  const coveredY = new Uint32Array(Y);\n  const slack = new Uint32Array(X);\n  const slackV = new Array<number>(X).fill(0);\n  const slackX = new Uint32Array(X);\n\n  for (let rootY = 0; unmatched > 0; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let slackMin = 0;\n    slackX.fill(rootY);\n    coveredY[rootY] = unmatched;\n    let slackMid = initSlack(rootY, matrix, dualX, dualY, slack, slackV);\n\n    // Run stage\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // If no zero, zero the min\n      if (slackMin >= slackMid) {\n        slackMid = step6(\n          findUncoveredMin(slackMid, slack, slackV),\n          unmatched,\n          slackMid,\n          coveredY,\n          dualX,\n          dualY,\n          slack,\n          slackV\n        );\n      }\n\n      // Prime the zero / cover the prime's column\n      const x = slack[slackMin++];\n\n      // Step 5: If no star in the column, turn primes into stars\n      if (starsX[x] === -1) {\n        step5(x, slackX, starsX, starsY);\n        --unmatched;\n        break;\n      }\n\n      // Cover the star's row\n      const sy = starsX[x];\n      coveredY[sy] = unmatched;\n\n      // Update slack\n      slackMid = updateSlack(\n        sy,\n        slackMid,\n        matrix,\n        dualX,\n        dualY,\n        slack,\n        slackV,\n        slackX\n      );\n    }\n  }\n}\n\n/**\n * Augments the current matching.\n *\n * This step effectively increases the number of matches (stars)\n * by 1, bringing the algorithm closer to an optimal assignment.\n *\n * Augmentation is performed by flipping matched and unmatched edges along\n * an augmenting path, starting from an unmatched node / edge and\n * continuing until no matched edge can be found.\n *\n * @param x - The starting node's column.\n * @param primeX - An array mapping primed columns to rows.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step5(\n  x: number,\n  primeX: number[] | Uint32Array,\n  starsX: number[],\n  starsY: number[]\n): void {\n  do {\n    const y = primeX[x];\n    const sx = starsY[y];\n    starsX[x] = y;\n    starsY[y] = x;\n    x = sx;\n  } while (x !== -1);\n}\n\n/**\n * Adjusts dual variables and slack to uncover more admissible edges.\n *\n * @param min - The value to adjust by.\n * @param covV - The value indicating a row is covered.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param exposedX - An array indicating uncovered columns.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  min: number,\n  covV: number,\n  mid: number,\n  coveredY: number[] | Uint32Array,\n  dualX: number[],\n  dualY: number[],\n  slack: number[] | Uint32Array,\n  slackV: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  for (let i = 0; i < mid; ++i) {\n    const x = slack[i];\n    dualX[x] = dualX[x] === min ? 0 : dualX[x] - min;\n  }\n\n  for (let i = mid; i < X; ++i) {\n    const x = slack[i];\n    if (slackV[x] === min) {\n      slack[i] = slack[mid];\n      slack[mid++] = x;\n    } else {\n      slackV[x] -= min;\n    }\n  }\n\n  min = -min;\n  for (let y = 0; y < Y; ++y) {\n    if (coveredY[y] === covV) {\n      dualY[y] = dualY[y] === min ? 0 : dualY[y] - min;\n    }\n  }\n\n  return mid;\n}\n\nexport function findUncoveredMin(\n  mid: number,\n  slack: number[] | Uint32Array,\n  slackV: number[]\n): number {\n  const X = slack.length;\n\n  let minV = slackV[slack[mid]];\n  for (let i = mid + 1; i < X; ++i) {\n    if (slackV[slack[i]] < minV) {\n      minV = slackV[slack[i]];\n    }\n  }\n\n  return minV;\n}\n\nexport function initSlack(\n  y: number,\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  slack: number[] | Uint32Array,\n  slackV: number[]\n): number {\n  const dy = -dualY[y];\n  const row = matrix[y];\n  const X = dualX.length;\n\n  let mid = 0;\n  for (let x = 0; x < X; ++x) {\n    slack[x] = x;\n    const dual = dualX[x] === dy ? 0 : dualX[x] - dy;\n    if (row[x] === dual) {\n      slack[x] = slack[mid];\n      slack[mid++] = x;\n    } else {\n      slackV[x] = row[x] - dual;\n    }\n  }\n\n  return mid;\n}\n\n/**\n * Generates a string representation of the cost matrix,\n * annotating starred (*) and primed (\") elements.\n *\n * Stars (*) indicate part of a potential solution, while primes (\") mark\n * elements considered for augmenting the current solution. This visualization\n * aids in understanding and debugging the matrix's state at various steps of\n * the algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starsY - An array of star y coordinates to x coordinates.\n * @param primeX - (Optional) An array of prime x coordinates to y coordinates.\n *\n * @returns A string visualization of the matrix with stars and primes.\n */\nexport function toString<T>(\n  matrix: Matrix<T>,\n  starsY: number[],\n  primeX: number[]\n): string {\n  // Mark values as stars or primes\n  return _toString(matrix, (v, y, x): string => {\n    let str = `${v}`;\n    if (x == starsY[y]) {\n      str = \"*\" + str;\n    }\n    if (y == primeX[x]) {\n      str = '\"' + str;\n    }\n    return str;\n  });\n}\n\nexport function updateSlack(\n  y: number,\n  midS: number,\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  slack: number[] | Uint32Array,\n  slackV: number[],\n  slackX: number[] | Uint32Array\n): number {\n  const dy = -dualY[y];\n  const row = matrix[y];\n  const X = slackX.length;\n\n  for (let i = midS; i < X; ++i) {\n    const x = slack[i];\n    let value = dualX[x] === dy ? 0 : dualX[x] - dy;\n    if (row[x] === value) {\n      slack[i] = slack[midS];\n      slack[midS++] = x;\n      slackX[x] = y;\n    } else {\n      value = row[x] - value;\n      if (value < slackV[x]) {\n        slackV[x] = value;\n        slackX[x] = y;\n      }\n    }\n  }\n\n  return midS;\n}\n","import { Matrix } from \"../../types/matrix\";\nimport { MunkresResult } from \"../../types/munkres\";\n\nimport { getMin } from \"../array\";\nimport { copy, transpose } from \"../matrix\";\nimport { step5 } from \"./numMunkres\";\n\nexport function safeExec(matrix: Matrix<bigint>): MunkresResult<bigint> {\n  // Get dimensions\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose if Y > X\n  if (Y > X) {\n    matrix = copy(matrix);\n    transpose(matrix);\n  }\n\n  // Get optimal assignments\n  return exec(matrix);\n}\n\nexport function exec(matrix: Matrix<bigint>): MunkresResult<bigint> {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // If empty matrix\n  if (Y <= 0 || X <= 0) {\n    return { dualX: [], dualY: [], starsX: [], starsY: [] };\n  }\n\n  // If invalid matrix\n  if (Y > X) {\n    throw new RangeError(\"invalid MxN matrix: M > N\");\n  }\n\n  // Step 1: Reduce\n  const dualX = new Array<bigint>(X);\n  const dualY = new Array<bigint>(Y);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  const stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Step 4: Find complete matching\n  step4(Y - stars, matrix, dualX, dualY, starsX, starsY);\n\n  // Return matching\n  return { dualX, dualY, starsX, starsY };\n}\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  // Reduce rows\n  for (let y = 0; y < Y; ++y) {\n    dualY[y] = getMin(matrix[y])!;\n  }\n\n  // Reduce columns\n  if (Y < X) {\n    dualX.fill(0n);\n    return;\n  }\n\n  let dy = dualY[0];\n  let row = matrix[0];\n  for (let x = 0; x < X; ++x) {\n    dualX[x] = row[x] - dy;\n  }\n  for (let y = 1; y < Y; ++y) {\n    dy = dualY[y];\n    row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dx = row[x] - dy;\n      if (dx < dualX[x]) {\n        dualX[x] = dx;\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const dy = -dualY[y];\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (starsX[x] === -1 && row[x] === dualX[x] - dy) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param unmatched - The number of missing matches.\n * @param mat - An MxN cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param starsX - An array mapping star columns to row. Modified in place.\n * @param starsY - An array mapping star rows to columns. Modified in place.\n */\nexport function step4(\n  unmatched: number,\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): void {\n  if (unmatched <= 0) {\n    return;\n  }\n\n  const X = dualX.length;\n  const Y = dualY.length;\n  const coveredY = new Uint32Array(Y);\n  const slack = new Uint32Array(X);\n  const slackV = new Array<bigint>(X);\n  const slackX = new Uint32Array(X);\n\n  for (let rootY = 0; unmatched > 0; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    let slackMin = 0;\n    slackX.fill(rootY);\n    coveredY[rootY] = unmatched;\n    let slackMid = initSlack(rootY, matrix, dualX, dualY, slack, slackV);\n\n    // Run stage\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // If no zero, zero the min\n      if (slackMin >= slackMid) {\n        slackMid = step6(\n          findUncoveredMin(slackMid, slack, slackV),\n          unmatched,\n          slackMid,\n          coveredY,\n          dualX,\n          dualY,\n          slack,\n          slackV\n        );\n      }\n\n      // Prime the zero / cover the prime's column\n      const x = slack[slackMin++];\n\n      // Step 5: If no star in the column, turn primes into stars\n      if (starsX[x] === -1) {\n        step5(x, slackX, starsX, starsY);\n        --unmatched;\n        break;\n      }\n\n      // Cover the star's row\n      const sy = starsX[x];\n      coveredY[sy] = unmatched;\n\n      // Update slack\n      slackMid = updateSlack(\n        sy,\n        slackMid,\n        matrix,\n        dualX,\n        dualY,\n        slack,\n        slackV,\n        slackX\n      );\n    }\n  }\n}\n\n/**\n * Adjusts dual variables and slack to uncover more admissible edges.\n *\n * @param min - The value to adjust by.\n * @param covV - The value indicating a row is covered.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param exposedX - An array indicating uncovered columns.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  min: bigint,\n  covV: number,\n  mid: number,\n  coveredY: number[] | Uint32Array,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: number[] | Uint32Array,\n  slackV: bigint[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  for (let i = 0; i < mid; ++i) {\n    dualX[slack[i]] -= min;\n  }\n\n  for (let i = mid; i < X; ++i) {\n    const x = slack[i];\n    slackV[x] -= min;\n    if (slackV[x] === 0n) {\n      slack[i] = slack[mid];\n      slack[mid++] = x;\n    }\n  }\n\n  for (let y = 0; y < Y; ++y) {\n    if (coveredY[y] === covV) {\n      dualY[y] += min;\n    }\n  }\n\n  return mid;\n}\n\nexport function findUncoveredMin(\n  mid: number,\n  slack: number[] | Uint32Array,\n  slackV: bigint[]\n): bigint {\n  const X = slack.length;\n\n  let minV = slackV[slack[mid]];\n  for (let i = mid + 1; i < X; ++i) {\n    if (slackV[slack[i]] < minV) {\n      minV = slackV[slack[i]];\n    }\n  }\n\n  return minV;\n}\n\nexport function initSlack(\n  y: number,\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: number[] | Uint32Array,\n  slackV: bigint[]\n): number {\n  const dy = dualY[y];\n  const row = matrix[y];\n  const X = dualX.length;\n\n  let mid = 0;\n  for (let x = 0; x < X; ++x) {\n    slack[x] = x;\n    slackV[x] = row[x] - dualX[x] - dy;\n    if (slackV[x] === 0n) {\n      slack[x] = slack[mid];\n      slack[mid++] = x;\n    }\n  }\n\n  return mid;\n}\n\nexport function updateSlack(\n  y: number,\n  midS: number,\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  slack: number[] | Uint32Array,\n  slackV: bigint[],\n  slackX: number[] | Uint32Array\n): number {\n  const dy = dualY[y];\n  const row = matrix[y];\n  const X = slackX.length;\n\n  for (let i = midS; i < X; ++i) {\n    const x = slack[i];\n    const value = row[x] - dualX[x] - dy;\n    if (value < slackV[x]) {\n      if (value === 0n) {\n        slack[i] = slack[midS];\n        slack[midS++] = x;\n        slackX[x] = y;\n      } else {\n        slackV[x] = value;\n        slackX[x] = y;\n      }\n    }\n  }\n\n  return midS;\n}\n","import { Matrix } from \"../../types/matrix\";\nimport { MunkresResult } from \"../../types/munkres\";\n\nimport { isBigInt } from \"../is\";\n\nimport { safeExec as bigSafeExec } from \"./bigMunkres\";\nimport { safeExec as numSafeExec } from \"./numMunkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n *\n * @privateRemarks\n * Citations:\n * 1. {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | Munkres' Assignment Algorithm, Modified for Rectangular Matrices}\n *     - Used as the foundation and enhanced with custom optimizations.\n *\n * 1. {@link https://www.ri.cmu.edu/pub_files/pub4/mills_tettey_g_ayorkor_2007_3/mills_tettey_g_ayorkor_2007_3.pdf | Mills-Tettey, Ayorkor & Stent, Anthony & Dias, M.. (2007). The Dynamic Hungarian Algorithm for the Assignment Problem with Changing Costs.}\n *     - Used to implement primal-dual variables and dynamic updates.\n *\n * 1. {@link https://public.websites.umich.edu/~murty/612/612slides4.pdf | Murty, K. G.. Primal-Dual Algorithms. [IOE 612, Lecture slides 4]. Department of Industrial and Operations Engineering, University of Michigan.}\n *     - Used to implement primal-dual and slack variables.\n */\nexport function safeExec(matrix: Matrix<number>): MunkresResult<number>;\nexport function safeExec(matrix: Matrix<bigint>): MunkresResult<bigint>;\nexport function safeExec<T extends number | bigint>(\n  matrix: Matrix<T>\n): MunkresResult<T> {\n  return (\n    isBigInt((matrix[0] ?? [])[0])\n      ? bigSafeExec(matrix as Matrix<bigint>)\n      : numSafeExec(matrix as Matrix<number>)\n  ) as MunkresResult<T>;\n}\n","import { Matrix } from \"./types/matrix\";\nimport { Tuple } from \"./types/tuple\";\n\nimport { entries } from \"./utils/array\";\nimport { flipH } from \"./utils/matrix\";\n\nimport { safeExec } from \"./utils/munkres/munkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n */\nexport function munkres(costMatrix: Matrix<number>): Tuple<number>[];\nexport function munkres(costMatrix: Matrix<bigint>): Tuple<number>[];\nexport function munkres<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): Tuple<number>[] {\n  // Get optimal assignments\n  const { starsY } = safeExec(costMatrix as Matrix<number>);\n\n  // Create assignment pairs\n  const pairs = entries(starsY);\n\n  // Transpose if Y > X\n  if (costMatrix.length > (costMatrix[0]?.length ?? 0)) {\n    flipH(pairs);\n  }\n\n  // Return assignments\n  return pairs;\n}\n"],"names":["copy","matrix","Y","dupe","y","create","rows","columns","callbackFn","X","mat","row","x","flipH","getMax","_a","max","getMin","min","invert","bigVal","negate","transpose","N","temp","createCostMatrix","workers","jobs","costFn","getMaxCost","costMatrix","getMinCost","invertCostMatrix","negateCostMatrix","entries","array","out","i","isBigInt","value","safeExec","exec","dualX","dualY","step1","starsX","starsY","stars","steps2To3","step4","dy","dx","dual","unmatched","coveredY","slack","slackV","slackX","rootY","slackMin","slackMid","initSlack","step6","findUncoveredMin","step5","sy","updateSlack","primeX","sx","covV","mid","minV","midS","bigSafeExec","numSafeExec","munkres","pairs"],"mappings":"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"}