{"version":3,"file":"munkres.min.mjs","sources":["../../src/utils/matrix.ts","../../src/utils/costMatrix.ts","../../src/utils/array.ts","../../src/utils/munkres.ts","../../src/utils/bigMunkres.ts","../../src/utils/is.ts","../../src/munkres.ts"],"sourcesContent":["import { Matrix, MatrixMapFn } from \"../types/matrix\";\n\n/**\n * Creates a copy of a given matrix.\n *\n * @param matrix - The matrix to be copied.\n *\n * @returns A copy of the input matrix.\n */\nexport function copy<T>(matrix: Matrix<T>): Matrix<T> {\n  const Y = matrix.length;\n  const dupe: Matrix<T> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    dupe[y] = matrix[y].slice(0);\n  }\n  return dupe;\n}\n\n/**\n * Creates a matrix with specified rows and columns.\n *\n * The callback function is called for every combination of elements from the\n * `rows` and `columns` arrays, receiving the current row and column elements\n * as arguments, and its return value is used to populate the matrix.\n *\n * @param rows - An array of row elements.\n * @param columns - An array of column elements.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row element and a column element as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = [1, 2];\n * const cols = ['a', 'b', 'c'];\n * const callbackFn = (row, col) =\\> `${row}${col}`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['1a', '1b', '1c'],\n * //   ['2a', '2b', '2c']\n * // ]\n */\nexport function create<R, C, T>(\n  rows: R[],\n  columns: C[],\n  callbackFn: (row: R, col: C) => T\n): Matrix<T> {\n  const Y = rows.length;\n  const X = columns.length;\n  const mat = new Array<T[]>(Y);\n  for (let y = 0; y < Y; ++y) {\n    const row = new Array<T>(X);\n    for (let x = 0; x < X; ++x) {\n      row[x] = callbackFn(rows[y], columns[x]);\n    }\n    mat[y] = row;\n  }\n  return mat;\n}\n\n/**\n * Flips a matrix horizontally.\n *\n * After the flip, the element at position `[y][x]` moves to `[y][M-x-1]`,\n * where `M` is the number of columns in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipH(matrix);\n * // matrix is now:\n * // [\n * //   [3, 2, 1],\n * //   [6, 5, 4],\n * //   [9, 8, 7]\n * // ]\n */\nexport function flipH<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].reverse();\n  }\n}\n\n/**\n * Flips a matrix vertically.\n *\n * After the flip, the element at position `[y][x]` moves to `[N-y-1][x]`,\n * where `N` is the number of rows in the matrix.\n *\n * @param matrix - The matrix to be flipped. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n *\n * flipV(matrix);\n * // matrix is now:\n * // [\n * //   [7, 8, 9],\n * //   [4, 5, 6],\n * //   [1, 2, 3]\n * // ]\n */\nexport function flipV<T>(matrix: Matrix<T>): void {\n  matrix.reverse();\n}\n\n/**\n * Generates a matrix with specified rows and columns.\n *\n * The callback function is called with every combination of row and column indices,\n * and its return value is used to populate the matrix.\n *\n * @param rows - The number of rows.\n * @param columns - The number of columns.\n * @param callbackFn - A function that produces values for the new matrix,\n *                     taking a row and column index as arguments.\n *\n * @returns A matrix populated by the results of the `callbackFn` function.\n *\n * @example\n * const rows = 2;\n * const cols = 3;\n * const callbackFn = (row, col) =\\> `(${row},${col})`;\n *\n * const matrix = create(rows, cols, callbackFn);\n * // matrix is:\n * // [\n * //   ['(0,0)', '(0,1)', '(0,2)'],\n * //   ['(1,0)', '(1,1)', '(1,2)']\n * // ]\n */\nexport function gen<T>(\n  rows: number,\n  cols: number,\n  callbackFn: (row: number, col: number) => T\n): Matrix<T> {\n  const matrix: Matrix<T> = new Array(rows);\n\n  for (let r = 0; r < rows; ++r) {\n    const row = new Array(cols);\n    for (let c = 0; c < cols; ++c) {\n      row[c] = callbackFn(r, c);\n    }\n    matrix[r] = row;\n  }\n\n  return matrix;\n}\n\n/**\n * Finds the maximum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMax(matrix)); // Output: 8\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMax(matrix)); // Output: 8n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMax(matrix)); // Output: 'i'\n */\nexport function getMax(matrix: Matrix<number>): number | undefined;\nexport function getMax(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMax(matrix: Matrix<string>): string | undefined;\nexport function getMax<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let max = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (max < row[x]) {\n        max = row[x];\n      }\n    }\n  }\n\n  return max;\n}\n\n/**\n * Finds the minimum value in a given matrix.\n *\n * @param matrix - The matrix.\n *\n * @returns The minimum value, or `undefined` if the matrix is empty.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(getMin(matrix)); // Output: 0\n *\n * @example\n * const matrix = [\n *   [1n, 3n, 2n],\n *   [4n, 0n, 6n],\n *   [7n, 5n, 8n]\n * ];\n * console.log(getMin(matrix)); // Output: 0n\n *\n * @example\n * const matrix = [\n *   ['b', 'd', 'c'],\n *   ['e', 'a', 'g'],\n *   ['h', 'f', 'i']\n * ];\n * console.log(getMin(matrix)); // Output: 'a'\n */\nexport function getMin(matrix: Matrix<number>): number | undefined;\nexport function getMin(matrix: Matrix<bigint>): bigint | undefined;\nexport function getMin(matrix: Matrix<string>): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  matrix: Matrix<T>\n): T | undefined {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  let min = matrix[0][0];\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      if (min > row[x]) {\n        min = row[x];\n      }\n    }\n  }\n\n  return min;\n}\n\n/**\n * Inverts the values in a given matrix by\n * subtracting each element from a given large value.\n *\n * @param matrix - The matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, uses the maximum value in the matrix.\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * invert(matrix);\n * // matrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const matrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * invert(matrix, 50);\n * // matrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invert(matrix: Matrix<number>, bigVal?: number): void;\nexport function invert(matrix: Matrix<bigint>, bigVal?: bigint): void;\nexport function invert<T extends number | bigint>(\n  matrix: Matrix<T>,\n  bigVal?: T\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y <= 0 || X <= 0) {\n    return undefined;\n  }\n\n  bigVal = bigVal ?? (getMax(matrix as Matrix<number>)! as T);\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = (bigVal - row[x]) as T;\n    }\n  }\n}\n\n/**\n * Calls a defined callback function on each element\n * of a matrix, and returns a new matrix of the results.\n *\n * @param matrix - The original matrix.\n * @param callbackfn - A function that accepts up to four arguments.\n * Will be called once per element in the matrix.\n *\n * @returns The result matrix.\n *\n * @example\n * const matrix = [\n *   [1, 3, 2],\n *   [4, 0, 6],\n *   [7, 5, 8]\n * ];\n * console.log(map(matrix, v =\\> v * v));\n * // Output: [\n * //   [ 1,  9,  4],\n * //   [16,  0, 36],\n * //   [49, 25, 64]\n * // ]\n */\nexport function map<A, B>(\n  matrix: Matrix<A>,\n  callbackFn: (value: A, y: number, x: number, matrix: Matrix<A>) => B\n): Matrix<B> {\n  const Y = matrix.length;\n  const out: Matrix<B> = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    const from = matrix[y];\n    const X = from.length;\n    const to = new Array(X);\n    for (let x = 0; x < X; ++x) {\n      to[x] = callbackFn(from[x], y, x, matrix);\n    }\n    out[y] = to;\n  }\n  return out;\n}\n\n/**\n * Negates the values in a given matrix.\n *\n * @param matrix - The matrix to be negated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * negate(matrix);\n * // matrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negate(matrix: Matrix<number>): void;\nexport function negate(matrix: Matrix<bigint>): void;\nexport function negate(matrix: Matrix<number | bigint>): void;\nexport function negate<T extends number | bigint>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      row[x] = -row[x] as T;\n    }\n  }\n}\n\n/**\n * Pads a matrix to a specified size with a given fill value.\n *\n * The padding is applied from the ends (right) of each row and\n * the ends (bottom) of each column. If a dimension is already\n * at or above the desired value, no change is made to it.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value used for padding.\n */\nexport function pad<T>(\n  matrix: Matrix<T>,\n  height: number,\n  width: number,\n  fillValue: T\n): void {\n  padHeight(matrix, height, fillValue);\n  padWidth(matrix, width, fillValue);\n}\n\n/**\n * Pads the height (number of rows) of a matrix with a given fill value.\n *\n * Rows are added to the end (bottom) of the matrix until its height reaches\n * `height`, with each new row filled with `fillValue`. If the matrix is\n * already at or above `height`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param height - The desired number of rows in the matrix.\n * @param fillValue - The value to use for filling new rows.\n */\nexport function padHeight<T>(\n  matrix: Matrix<T>,\n  height: number,\n  fillValue: T\n): void {\n  const Y = matrix.length;\n  if (Y >= height) {\n    return;\n  }\n\n  matrix.length = height;\n  const X = matrix[0]?.length ?? 0;\n  for (let y = Y; y < height; ++y) {\n    matrix[y] = new Array<T>(X).fill(fillValue);\n  }\n}\n\n/**\n * Pads the width (number of columns) of a matrix with a given fill value.\n *\n * Columns are added to the right of the matrix until its width reaches\n * `width`, with each new column filled with `fillValue`. If the matrix is\n * already at or above `width`, no change is made.\n *\n * @param matrix - The matrix to pad. Modified in place.\n * @param width - The desired number of columns in the matrix.\n * @param fillValue - The value to use for filling new columns.\n */\nexport function padWidth<T>(\n  matrix: Matrix<T>,\n  width: number,\n  fillValue: T\n): void {\n  const X = matrix[0]?.length ?? 0;\n  if (X >= width) {\n    return;\n  }\n\n  const Y = matrix.length;\n  for (let y = 0; y < Y; ++y) {\n    matrix[y].length = width;\n    matrix[y].fill(fillValue, X, width);\n  }\n}\n\n/**\n * Rotates a matrix by 90 degrees clockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 1],\n * //   [4, 2]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [4, 1],\n * //   [5, 2],\n * //   [6, 3]\n * // ]\n */\nexport function rot90<T>(matrix: Matrix<T>): void {\n  flipV(matrix);\n  transpose(matrix);\n}\n\n/**\n * Rotates a matrix by 90 degrees counterclockwise.\n *\n * @param matrix - The matrix to be rotated. Modified in place.\n *\n * @example\n * const matrix = [\n *   [1, 2],\n *   [3, 4]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [2, 4],\n * //   [1, 3]\n * // ]\n *\n * @example\n * const matrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * rot90(matrix);\n * // matrix is now:\n * // [\n * //   [3, 6],\n * //   [2, 5],\n * //   [1, 4]\n * // ]\n */\nexport function rotNeg90<T>(matrix: Matrix<T>): void {\n  transpose(matrix);\n  flipV(matrix);\n}\n/**\n * Generates a string representation of a matrix.\n *\n * @param mat - The matrix.\n * @param callbackFn - (Optional) A callback function to convert each element\n * to a string. Defaults to using each elements `toString` method.\n *\n * @returns A string representation of the matrix.\n */\nexport function toString<T>(\n  mat: Matrix<T>,\n  callbackFn: MatrixMapFn<T, string> = v => `${v}`\n): string {\n  const strs: Matrix<string> = map(mat, callbackFn);\n  const Y = strs.length;\n  const X = strs[0]?.length ?? 0;\n\n  // For each column\n  for (let x = 0; x < X; ++x) {\n    // Get width\n    let width = 0;\n    for (let y = 0; y < Y; ++y) {\n      width = Math.max(width, strs[y][x].length);\n    }\n\n    // Adjust width\n    for (let y = 0; y < Y; ++y) {\n      strs[y][x] = strs[y][x].padStart(width, \" \");\n    }\n  }\n\n  // Create output\n  const buf: string[] = new Array(Y);\n  for (let y = 0; y < Y; ++y) {\n    buf[y] = `[${strs[y].join(\", \")}]`;\n  }\n\n  // Return output\n  return buf.join(\",\\n\");\n}\n\n/**\n * Transpose a given matrix, switching its rows and columns.\n *\n * In the transposed matrix, the value originally at position [y][x]\n * moves to [x][y], effectively turning rows of the original matrix into\n * columns in the output matrix, and vice versa.\n *\n * @param matrix - The matrix to transpose. Modified in place.\n *\n * @example\n * // Transpose a 2x3 matrix to a 3x2 matrix\n * const original = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * transpose(original);\n * // transposed is now:\n * // [\n * //   [1, 4],\n * //   [2, 5],\n * //   [3, 6]\n * // ]\n */\nexport function transpose<T>(matrix: Matrix<T>): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Transpose shared square\n  const N = Math.min(Y, X);\n  for (let y = 1; y < N; ++y) {\n    for (let x = 0; x < y; ++x) {\n      const temp = matrix[y][x];\n      matrix[y][x] = matrix[x][y];\n      matrix[x][y] = temp;\n    }\n  }\n\n  // Add columns\n  if (Y > X) {\n    for (let y = 0; y < X; ++y) {\n      matrix[y].length = Y;\n      for (let x = X; x < Y; ++x) {\n        matrix[y][x] = matrix[x][y];\n      }\n    }\n    matrix.length = X;\n  }\n\n  // Add rows\n  if (Y < X) {\n    matrix.length = X;\n    for (let y = Y; y < X; ++y) {\n      matrix[y] = new Array(Y);\n      for (let x = 0; x < Y; ++x) {\n        matrix[y][x] = matrix[x][y];\n      }\n    }\n    for (let y = 0; y < Y; ++y) {\n      matrix[y].length = Y;\n    }\n  }\n}\n","import { Matrix } from \"../types/matrix\";\n\nimport { create, getMax, getMin, invert, negate } from \"./matrix\";\n\n/**\n * Constructs a cost matrix for a set of\n * workers and jobs using a provided cost function.\n *\n * Each element of the matrix represents the cost associated with assigning a\n * specific worker to a specific job. The cost is determined by `costFn`,\n * which computes the cost based on a worker-job pair.\n *\n * @param workers - An array of workers.\n * @param jobs - An array of jobs.\n * @param costFn - Given a worker and a job, returns the\n * numeric cost of assigning that worker to that job.\n *\n * @returns A cost matrix where the values at position `[y][x]`\n * represent the cost of assigning the `y`-th worker to the `x`-th job.\n *\n * @example\n * // Define workers, jobs, and a simple cost function\n * const workers = ['Alice', 'Bob'];\n * const jobs = ['Job1', 'Job2'];\n * const costFn = (worker: string, job: string) =\\> worker.length + job.length;\n *\n * // Create the cost matrix\n * const matrix = createCostMatrix(workers, jobs, costFn);\n * // [\n * //   [9, 9], // ['Alice' + 'Job1', 'Alice' + 'Job2']\n * //   [7, 7]  // [  'Bob' + 'Job1',   'Bob' + 'Job2']\n * // ]\n */\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => number\n): Matrix<number>;\nexport function createCostMatrix<W, J>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => bigint\n): Matrix<bigint>;\nexport function createCostMatrix<W, J, T extends number | bigint>(\n  workers: W[],\n  jobs: J[],\n  costFn: (worker: W, job: J) => T\n): Matrix<T> {\n  return create(workers, jobs, costFn);\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMaxCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMaxCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMaxCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMax(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Finds the maximum value in a given cost matrix.\n *\n * @param costMatrix - The cost matrix.\n *\n * @returns The maximum value, or `undefined` if the matrix is empty.\n */\nexport function getMinCost(costMatrix: Matrix<number>): number | undefined;\nexport function getMinCost(costMatrix: Matrix<bigint>): bigint | undefined;\nexport function getMinCost<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): T | undefined {\n  return getMin(costMatrix as Matrix<number>) as T | undefined;\n}\n\n/**\n * Inverts the values in a given cost matrix by\n * subtracting each element from a specified large value.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be inverted. Modified in place.\n * @param bigVal - (Optional) A large value used as the basis for inversion.\n * If not provided, the maximum value in the matrix is used.\n *\n * @example\n * const costMatrix = [\n *   [1, 2, 3],\n *   [4, 5, 6]\n * ];\n *\n * // Invert the matrix\n * invertCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [5, 4, 3],\n * //   [2, 1, 0]\n * // ]\n *\n * @example\n * const anotherMatrix = [\n *   [10, 20],\n *   [30, 40]\n * ];\n *\n * // Invert the matrix with a given bigVal\n * invertCostMatrix(anotherMatrix, 50);\n *\n * // costMatrix is now:\n * // [\n * //   [40, 30],\n * //   [20, 10]\n * // ]\n */\nexport function invertCostMatrix(\n  costMatrix: Matrix<number>,\n  bigVal?: number\n): void;\nexport function invertCostMatrix(\n  costMatrix: Matrix<bigint>,\n  bigVal?: bigint\n): void;\nexport function invertCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>,\n  bigVal?: T\n): void {\n  invert(costMatrix as Matrix<number>, bigVal as number);\n}\n\n/**\n * Negates the values in a given cost matrix.\n *\n * This is useful for converting a minimized cost matrix\n * into a maximized cost matrix (or vice versa).\n *\n * @param costMatrix - The cost matrix to be negated. Modified in place.\n *\n * @example\n * const costMatrix = [\n *   [1,  2, 3],\n *   [4, -5, 6],\n *   [7,  8, 9]\n * ];\n *\n * // Negate the cost matrix\n * negateCostMatrix(costMatrix);\n *\n * // costMatrix is now:\n * // [\n * //   [-1, -2, -3],\n * //   [-4,  5, -6],\n * //   [-7, -8, -9]\n * // ]\n */\nexport function negateCostMatrix(costMatrix: Matrix<number>): void;\nexport function negateCostMatrix(costMatrix: Matrix<bigint>): void;\nexport function negateCostMatrix<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): void {\n  negate(costMatrix);\n}\n","/**\n * Find the minimum value in a given array.\n *\n * @param array - An array.\n *\n * @returns The minimum value, or `undefined` if the array is empty.\n *\n * @example\n * const array = [3, 1, 2];\n * console.log(getMin(array)); // Output: 1\n *\n * @example\n * const array = [3n, 1n, 2n];\n * console.log(getMin(array)); // Output: 1n\n *\n * @example\n * const array = ['d', 'b', 'c'];\n * console.log(getMin(array)); // Output: 'b'\n */\nexport function getMin(array: number[]): number | undefined;\nexport function getMin(array: bigint[]): bigint | undefined;\nexport function getMin(array: string[]): string | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined;\nexport function getMin<T extends number | bigint | string>(\n  array: T[]\n): T | undefined {\n  const N = array.length;\n  if (N <= 0) {\n    return undefined;\n  }\n\n  let min = array[0];\n  for (let i = 1; i < N; ++i) {\n    if (min > array[i]) {\n      min = array[i];\n    }\n  }\n\n  return min;\n}\n","import { Matrix } from \"../types/matrix\";\n\nimport { getMin } from \"./array\";\nimport { toString as _toString } from \"./matrix\";\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[]\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Reduce rows\n  if (Y <= X) {\n    for (let y = 0; y < Y; ++y) {\n      dualY[y] = getMin(matrix[y])!;\n    }\n  }\n\n  // Reduce columns\n  if (Y >= X) {\n    let dy = dualY[0];\n    let row = matrix[0];\n    for (let x = 0; x < X; ++x) {\n      dualX[x] = row[x] === dy ? 0 : row[x] - dy;\n    }\n    for (let y = 1; y < Y; ++y) {\n      dy = dualY[y];\n      row = matrix[y];\n      for (let x = 0; x < X; ++x) {\n        const dx = row[x] === dy ? 0 : row[x] - dy;\n        if (dx < dualX[x]) {\n          dualX[x] = dx;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starX - An array mapping star columns to row. Modified in place.\n * @param starY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const dy = -dualY[y];\n    const row = matrix[y];\n    for (let x = 0; x < X; ++x) {\n      const dual = dualX[x] === dy ? 0 : dualX[x] - dy;\n      if (starsX[x] === -1 && row[x] === dual) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Finds a complete matching of jobs to workers at minimum cost.\n *\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param mat - An MxN cost matrix.\n *\n * @returns An array representing optimal assignments. Each index / value\n * represents a row / column (respectively) assignment.\n *\n * @throws - {@link RangeError}\n * Thrown if the given MxN matrix has more rows than columns (M \\> N).\n *\n * @privateRemarks\n * Citations:\n * 1. {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | Munkres' Assignment Algorithm, Modified for Rectangular Matrices}\n *     - Used as the foundation and enhanced with custom optimizations.\n * 1. {@link https://www.ri.cmu.edu/pub_files/pub4/mills_tettey_g_ayorkor_2007_3/mills_tettey_g_ayorkor_2007_3.pdf | Mills-Tettey, Ayorkor & Stent, Anthony & Dias, M.. (2007). The Dynamic Hungarian Algorithm for the Assignment Problem with Changing Costs.}\n *     - Used to implement primal-dual variables and dynamic updates.\n * 1. {@link https://public.websites.umich.edu/~murty/612/612slides4.pdf | Murty, K. G.. Primal-Dual Algorithms. [IOE 612, Lecture slides 4]. Department of Industrial and Operations Engineering, University of Michigan.}\n *     - Used to implement primal-dual and slack variables.\n */\nexport function step4(matrix: Matrix<number>): number[] {\n  // Check input\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y > X) {\n    throw new RangeError(\"invalid MxN matrix: M > N\");\n  }\n\n  // Step 1: Reduce\n  const dualX = new Array<number>(X).fill(0);\n  const dualY = new Array<number>(Y).fill(0);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  let stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Check if complete matching\n  if (stars >= Y) {\n    return starsY;\n  }\n\n  // Step 4: Find complete matching\n  const coveredX = new Array<number>(X);\n  const coveredY = new Array<number>(Y).fill(-1);\n  const slackV = new Array<number>(X);\n  const slackX = new Array<number>(X);\n  const exposedX = new Array<number>(X);\n\n  for (let rootY = 0; stars < Y; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    coveredX.fill(-1);\n    coveredY[rootY] = rootY;\n    initExposed(exposedX);\n    initSlack(rootY, matrix, dualX, dualY, slackV, slackX);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Find an uncovered min\n      const [y, x] = findUncoveredMin(exposedX, slackV, slackX);\n\n      // Step 6: If not zero, zero the min\n      if (slackV[x] > 0) {\n        step6(slackV[x], rootY, coveredX, coveredY, dualX, dualY, slackV);\n      }\n\n      // Prime the zero / cover the column\n      coveredX[x] = y;\n      cover(exposedX, x);\n\n      // Step 5: If no star in the column, turn primes into stars\n      if (starsX[x] === -1) {\n        step5(x, coveredX, starsX, starsY);\n        ++stars;\n        break;\n      }\n\n      // Cover the star's row and update slack\n      const sy = starsX[x];\n      coveredY[sy] = rootY;\n      updateSlack(sy, matrix, dualX, dualY, exposedX, slackV, slackX);\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starsY;\n}\n\n/**\n * Augments the current matching.\n *\n * This step effectively increases the number of matches (stars)\n * by 1, bringing the algorithm closer to an optimal assignment.\n *\n * Augmentation is performed by flipping matched and unmatched edges along\n * an augmenting path, starting from an unmatched node / edge and\n * continuing until no matched edge can be found.\n *\n * @param x - The starting node's column.\n * @param coveredX - An array mapping covered columns to rows.\n * @param starX - An array mapping star columns to row. Modified in place.\n * @param starY - An array mapping star rows to columns. Modified in place.\n */\nexport function step5(\n  x: number,\n  coveredX: number[],\n  starX: number[],\n  starY: number[]\n): void {\n  do {\n    const y = coveredX[x];\n    const sx = starY[y];\n    starX[x] = y;\n    starY[y] = x;\n    x = sx;\n  } while (x !== -1);\n}\n\n/**\n * Adjusts dual variables and slack to uncover more admissible edges.\n *\n * @param min - The value to adjust by.\n * @param coveredX - An array mapping covered columns to rows.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  min: number,\n  rootY: number,\n  coveredX: number[],\n  coveredY: number[],\n  dualX: number[],\n  dualY: number[],\n  slackV: number[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  for (let y = 0; y < Y; ++y) {\n    if (coveredY[y] === rootY) {\n      dualY[y] = dualY[y] === -min ? 0 : dualY[y] + min;\n    }\n  }\n\n  for (let x = 0; x < X; ++x) {\n    if (coveredX[x] === -1) {\n      slackV[x] = slackV[x] === min ? 0 : slackV[x] - min;\n    } else {\n      dualX[x] = dualX[x] === min ? 0 : dualX[x] - min;\n    }\n  }\n}\n\nexport function initExposed(exposed: number[]): void {\n  const N = exposed.length;\n  for (let i = 0; i < N; ++i) {\n    exposed[i] = i;\n  }\n}\n\nexport function cover(exposed: number[], i: number): void {\n  const N = exposed.length;\n  const next = i + 1 < N ? exposed[i + 1] : N;\n  for (let j = i; j >= 0 && exposed[j] === i; --j) {\n    exposed[j] = next;\n  }\n}\n\nexport function findUncoveredMin(\n  exposedX: number[],\n  slackV: number[],\n  slackX: number[]\n): [number, number];\nexport function findUncoveredMin(\n  exposedX: number[],\n  slackV: bigint[],\n  slackX: number[]\n): [number, number];\nexport function findUncoveredMin<T extends number | bigint>(\n  exposedX: number[],\n  slackV: T[],\n  slackX: number[]\n): [number, number] {\n  const X = slackV.length;\n\n  let minX = exposedX[0];\n  let minV = slackV[minX];\n  for (let x = minX + 1; x < X && exposedX[x] < X; ++x) {\n    x = exposedX[x];\n    if (slackV[x] < minV) {\n      minV = slackV[x];\n      minX = x;\n      if (minV === 0) {\n        break;\n      }\n    }\n  }\n\n  return [slackX[minX], minX];\n}\n\nexport function initSlack(\n  y: number,\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  slackV: number[],\n  slackX: number[]\n): void {\n  const dy = -dualY[y];\n  const row = matrix[y];\n  const X = slackX.length;\n\n  slackX.fill(y);\n  for (let x = 0; x < X; ++x) {\n    const dual = dualX[x] === dy ? 0 : dualX[x] - dy;\n    slackV[x] = row[x] === dual ? 0 : row[x] - dual;\n  }\n}\n\n/**\n * Generates a string representation of the cost matrix,\n * annotating starred (*) and primed (\") elements.\n *\n * Stars (*) indicate part of a potential solution, while primes (\") mark\n * elements considered for augmenting the current solution. This visualization\n * aids in understanding and debugging the matrix's state at various steps of\n * the algorithm.\n *\n * @param mat - The cost matrix.\n * @param starY - An array of star y coordinates to x coordinates.\n * @param primeY - (Optional) An array of prime y coordinates to x coordinates.\n *\n * @returns A string visualization of the matrix with stars and primes.\n */\nexport function toString<T>(\n  mat: Matrix<T>,\n  starY: number[],\n  coveredX: number[]\n): string {\n  // Mark values as stars or primes\n  return _toString(mat, (v, y, x): string => {\n    let str = `${v}`;\n    if (x == starY[y]) {\n      str = \"*\" + str;\n    }\n    if (y == coveredX[x]) {\n      str = '\"' + str;\n    }\n    return str;\n  });\n}\n\nexport function updateSlack(\n  y: number,\n  matrix: Matrix<number>,\n  dualX: number[],\n  dualY: number[],\n  exposedX: number[],\n  slackV: number[],\n  slackX: number[]\n): void {\n  const dy = -dualY[y];\n  const row = matrix[y];\n  const X = slackX.length;\n\n  for (let x = 0; x < X && exposedX[x] < X; ++x) {\n    x = exposedX[x];\n    const dual = dualX[x] === dy ? 0 : dualX[x] - dy;\n    const slack = row[x] === dual ? 0 : row[x] - dual;\n    if (slack < slackV[x]) {\n      slackV[x] = slack;\n      slackX[x] = y;\n    }\n  }\n}\n","import { Matrix } from \"../types/matrix\";\nimport { getMin } from \"./array\";\nimport { cover, findUncoveredMin, initExposed, step5 } from \"./munkres\";\n\n/**\n * Initializes the dual variables for the Munkres algorithm.\n *\n * This is a preprocessing step that effectively performs\n * row-wise and column-wise reductions on the cost matrix. This\n * helps find an initial matching and improves the efficiency\n * of subsequent steps.\n *\n * @param matrix - The cost matrix.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n */\nexport function step1(\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[]\n): void {\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n\n  // Reduce rows\n  if (Y <= X) {\n    for (let y = 0; y < Y; ++y) {\n      dualY[y] = getMin(matrix[y])!;\n    }\n  }\n\n  // Reduce columns\n  if (Y >= X) {\n    for (let x = 0; x < X; ++x) {\n      dualX[x] = matrix[0][x] - dualY[0];\n    }\n    for (let y = 1; y < Y; ++y) {\n      const row = matrix[y];\n      const dy = dualY[y];\n      for (let x = 0; x < X; ++x) {\n        if (row[x] - dy < dualX[x]) {\n          dualX[x] = row[x] - dy;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Finds an initial matching for the munkres algorithm.\n *\n * @param matrix - The cost matrix.\n * @param starX - An array mapping star columns to row. Modified in place.\n * @param starY - An array mapping star rows to columns. Modified in place.\n *\n * @returns The number of matches (stars) found.\n */\nexport function steps2To3(\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  starsX: number[],\n  starsY: number[]\n): number {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  let stars = 0;\n  for (let y = 0; y < Y; ++y) {\n    const row = matrix[y];\n    const dy = dualY[y];\n    for (let x = 0; x < X; ++x) {\n      if (starsX[x] === -1 && row[x] === dualX[x] + dy) {\n        starsX[x] = y;\n        starsY[y] = x;\n        ++stars;\n        break;\n      }\n    }\n  }\n\n  return stars;\n}\n\n/**\n * Finds a complete matching of jobs to workers at minimum cost.\n *\n * This step iteratively improves upon an initial matching until a complete\n * matching is found. This involves updating dual variables and managing\n * slack values to uncover new opportunities for optimal assignments.\n *\n * @param mat - An MxN cost matrix.\n *\n * @returns An array representing optimal assignments. Each index / value\n * represents a row / column (respectively) assignment.\n *\n * @throws - {@link RangeError}\n * Thrown if the given MxN matrix has more rows than columns (M \\> N).\n *\n * @privateRemarks\n * Citations:\n * 1. {@link https://users.cs.duke.edu/~brd/Teaching/Bio/asmb/current/Handouts/munkres.html | Munkres' Assignment Algorithm, Modified for Rectangular Matrices}\n *     - Used as the foundation and enhanced with custom optimizations.\n *\n * 1. {@link https://www.ri.cmu.edu/pub_files/pub4/mills_tettey_g_ayorkor_2007_3/mills_tettey_g_ayorkor_2007_3.pdf | Mills-Tettey, Ayorkor & Stent, Anthony & Dias, M.. (2007). The Dynamic Hungarian Algorithm for the Assignment Problem with Changing Costs.}\n *     - Used to implement primal-dual variables and dynamic updates.\n *\n * 1. {@link https://public.websites.umich.edu/~murty/612/612slides4.pdf | Murty, K. G.. Primal-Dual Algorithms. [IOE 612, Lecture slides 4]. Department of Industrial and Operations Engineering, University of Michigan.}\n *     - Used to implement primal-dual and slack variables.\n */\nexport function bigStep4(matrix: Matrix<bigint>): number[] {\n  // Check input\n  const Y = matrix.length;\n  const X = matrix[0]?.length ?? 0;\n  if (Y > X) {\n    throw new RangeError(\"invalid MxN matrix: M > N\");\n  }\n\n  // Step 1: Reduce\n  const dualX = new Array<bigint>(X).fill(0n);\n  const dualY = new Array<bigint>(Y).fill(0n);\n  step1(matrix, dualX, dualY);\n\n  // Steps 2 & 3: Find initial matching\n  const starsX = new Array<number>(X).fill(-1);\n  const starsY = new Array<number>(Y).fill(-1);\n  let stars = steps2To3(matrix, dualX, dualY, starsX, starsY);\n\n  // Check if complete matching\n  if (stars >= Y) {\n    return starsY;\n  }\n\n  // Step 4: Find complete matching\n  const coveredX = new Array<number>(X);\n  const coveredY = new Array<number>(Y).fill(-1);\n  const slackV = new Array<bigint>(X);\n  const slackX = new Array<number>(X);\n  const exposedX = new Array<number>(X);\n\n  for (let rootY = 0; stars < Y; ++rootY) {\n    if (starsY[rootY] !== -1) {\n      continue;\n    }\n\n    // Initialize stage\n    coveredX.fill(-1);\n    coveredY[rootY] = rootY;\n    initExposed(exposedX);\n\n    // Initialize slack\n    initSlack(rootY, matrix, dualX, dualY, slackV, slackX);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Find an uncovered min\n      const [y, x] = findUncoveredMin(exposedX, slackV, slackX);\n\n      // Step 6: If not zero, zero the min\n      if (slackV[x] > 0n) {\n        step6(slackV[x], rootY, coveredX, coveredY, dualX, dualY, slackV);\n      }\n\n      // Prime the zero / cover the column\n      coveredX[x] = y;\n      cover(exposedX, x);\n\n      // Step 5: If no star in the column, turn primes into stars\n      if (starsX[x] === -1) {\n        step5(x, coveredX, starsX, starsY);\n        ++stars;\n        break;\n      }\n\n      // Cover the star's row and update slack\n      const sy = starsX[x];\n      coveredY[sy] = rootY;\n      updateSlack(sy, matrix, dualX, dualY, exposedX, slackV, slackX);\n    }\n  }\n\n  // Return assignments ([y] -> x)\n  return starsY;\n}\n\n/**\n * Adjusts dual variables and slack to uncover more admissible edges.\n *\n * @param min - The value to adjust by.\n * @param coveredX - An array mapping covered columns to rows.\n * @param coveredY - An array indicating whether a row is covered.\n * @param dualX - The dual variables associated with each column of the matrix. Modified in place.\n * @param dualY - The dual variables associated with each row of the matrix. Modified in place.\n * @param slackV - The slack values for each column. Modified in place.\n */\nexport function step6(\n  min: bigint,\n  rootY: number,\n  coveredX: number[],\n  coveredY: number[],\n  dualX: bigint[],\n  dualY: bigint[],\n  slackV: bigint[]\n): void {\n  const X = dualX.length;\n  const Y = dualY.length;\n\n  for (let y = 0; y < Y; ++y) {\n    if (coveredY[y] === rootY) {\n      dualY[y] += min;\n    }\n  }\n\n  for (let x = 0; x < X; ++x) {\n    if (coveredX[x] === -1) {\n      slackV[x] -= min;\n    } else {\n      dualX[x] -= min;\n    }\n  }\n}\n\nexport function initSlack(\n  y: number,\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  slackV: bigint[],\n  slackX: number[]\n): void {\n  const X = slackV.length;\n  const row = matrix[y];\n  const dy = dualY[y];\n\n  slackX.fill(y);\n  for (let x = 0; x < X; ++x) {\n    slackV[x] = row[x] - dualX[x] - dy;\n  }\n}\n\nexport function updateSlack(\n  y: number,\n  matrix: Matrix<bigint>,\n  dualX: bigint[],\n  dualY: bigint[],\n  exposedX: number[],\n  slackV: bigint[],\n  slackX: number[]\n): void {\n  const X = slackV.length;\n  const row = matrix[y];\n  const dy = dualY[y];\n\n  for (let x = 0; x < X && exposedX[x] < X; ++x) {\n    x = exposedX[x];\n    const slack = row[x] - dualX[x] - dy;\n    if (slack < slackV[x]) {\n      slackV[x] = slack;\n      slackX[x] = y;\n    }\n  }\n}\n","/**\n * Checks if the given value is of type `bigint`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `bigint`, `false` otherwise.\n *\n * @example\n * console.log(isBigInt(10n)); // true\n *\n * @example\n * console.log(isBigInt(10)); // false\n */\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n/**\n * Checks if the given value is of type `number`.\n *\n * @param value - The value to check.\n * @returns `true` if the value is of type `number`, `false` otherwise.\n *\n * @example\n * console.log(isNumber(10)); // true\n *\n * @example\n * console.log(isNumber(10n)); // false\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n","import { Matrix } from \"./types/matrix\";\nimport { Tuple } from \"./types/tuple\";\n\nimport { bigStep4 } from \"./utils/bigMunkres\";\nimport { isBigInt } from \"./utils/is\";\nimport { copy, flipH, transpose } from \"./utils/matrix\";\nimport { step4 } from \"./utils/munkres\";\n\n/**\n * Find the optimal assignments of `y` workers to `x` jobs to\n * minimize total cost.\n *\n * @param costMatrix - The cost matrix, where `mat[y][x]` represents the cost\n * of assigning worker `y` to job `x`.\n *\n * @returns An array of pairs `[y, x]` representing the optimal assignment\n * of workers to jobs. Each pair consists of a worker index `y` and a job\n * index `x`, indicating that worker `y` is assigned to job `x`.\n */\nexport function munkres(costMatrix: Matrix<number>): Tuple<number>[];\nexport function munkres(costMatrix: Matrix<bigint>): Tuple<number>[];\nexport function munkres<T extends number | bigint>(\n  costMatrix: Matrix<T>\n): Tuple<number>[] {\n  // Get dimensions\n  const Y = costMatrix.length;\n  const X = costMatrix[0]?.length ?? 0;\n\n  // If matrix is empty\n  if (X <= 0) {\n    return [];\n  }\n\n  // Transpose if Y > X\n  if (Y > X) {\n    costMatrix = copy(costMatrix);\n    transpose(costMatrix);\n  }\n\n  // Get optimal assignments\n  const y2x = isBigInt(costMatrix[0][0])\n    ? bigStep4(costMatrix as Matrix<bigint>)\n    : step4(costMatrix as Matrix<number>);\n\n  // Create pairs\n  const P = y2x.length;\n  const pairs: Tuple<number>[] = new Array(P);\n  for (let y = 0; y < P; ++y) {\n    pairs[y] = [y, y2x[y]];\n  }\n\n  // Transpose if Y > X\n  if (Y > X) {\n    flipH(pairs);\n  }\n\n  // Return assignments\n  return pairs;\n}\n"],"names":["copy","matrix","Y","dupe","y","create","rows","columns","callbackFn","X","mat","row","x","flipH","getMax","_a","max","getMin","min","invert","bigVal","negate","transpose","N","temp","createCostMatrix","workers","jobs","costFn","getMaxCost","costMatrix","getMinCost","invertCostMatrix","negateCostMatrix","array","i","step1","dualX","dualY","dy","dx","steps2To3","starsX","starsY","stars","dual","step4","coveredX","coveredY","slackV","slackX","exposedX","rootY","initExposed","initSlack","findUncoveredMin","step6","cover","step5","sy","updateSlack","starX","starY","sx","exposed","next","j","minX","minV","slack","bigStep4","isBigInt","value","munkres","y2x","P","pairs"],"mappings":"AASO,SAASA,EAAQC,GAA8B;AACpD,QAAMC,IAAID,EAAO,QACXE,IAAkB,IAAI,MAAMD,CAAC;AACnC,WAASE,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACvB,IAAAD,EAAKC,CAAC,IAAIH,EAAOG,CAAC,EAAE,MAAM,CAAC;AAEtB,SAAAD;AACT;AA4BgB,SAAAE,EACdC,GACAC,GACAC,GACW;AACX,QAAMN,IAAII,EAAK,QACTG,IAAIF,EAAQ,QACZG,IAAM,IAAI,MAAWR,CAAC;AAC5B,WAASE,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAO,IAAM,IAAI,MAASF,CAAC;AAC1B,aAASG,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,MAAAD,EAAAC,CAAC,IAAIJ,EAAWF,EAAKF,CAAC,GAAGG,EAAQK,CAAC,CAAC;AAEzC,IAAAF,EAAIN,CAAC,IAAIO;AAAA,EACX;AACO,SAAAD;AACT;AAyBO,SAASG,EAASZ,GAAyB;AAChD,QAAMC,IAAID,EAAO;AACjB,WAASG,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AAChB,IAAAH,EAAAG,CAAC,EAAE;AAEd;AA0GO,SAASU,EACdb,GACe;AA7LV,MAAAc;AA8LL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC3B,MAAAb,KAAK,KAAKO,KAAK;AACV;AAGT,MAAIO,IAAMf,EAAO,CAAC,EAAE,CAAC;AACrB,WAASG,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAO,IAAMV,EAAOG,CAAC;AACpB,aAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,MAAAI,IAAML,EAAIC,CAAC,MACbI,IAAML,EAAIC,CAAC;AAAA,EAGjB;AAEO,SAAAI;AACT;AAoCO,SAASC,EACdhB,GACe;AArPV,MAAAc;AAsPL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC3B,MAAAb,KAAK,KAAKO,KAAK;AACV;AAGT,MAAIS,IAAMjB,EAAO,CAAC,EAAE,CAAC;AACrB,WAASG,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAO,IAAMV,EAAOG,CAAC;AACpB,aAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,MAAAM,IAAMP,EAAIC,CAAC,MACbM,IAAMP,EAAIC,CAAC;AAAA,EAGjB;AAEO,SAAAM;AACT;AAsCgB,SAAAC,EACdlB,GACAmB,GACM;AAhTD,MAAAL;AAiTL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC3B,MAAA,EAAAb,KAAK,KAAKO,KAAK,IAIV;AAAA,IAAAW,IAAAA,KAAWN,EAAOb,CAAwB;AACnD,aAASG,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,YAAAO,IAAMV,EAAOG,CAAC;AACpB,eAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,QAAAD,EAAIC,CAAC,IAAKQ,IAAST,EAAIC,CAAC;AAAA,IAE5B;AAAA;AACF;AAkEO,SAASS,EAAkCpB,GAAyB;AAhYpE,MAAAc;AAiYL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC/B,WAASX,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAO,IAAMV,EAAOG,CAAC;AACpB,aAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,MAAAD,EAAIC,CAAC,IAAI,CAACD,EAAIC,CAAC;AAAA,EAEnB;AACF;AA0NO,SAASU,EAAarB,GAAyB;AAnmB/C,MAAAc;AAomBL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU,GAGzBQ,IAAI,KAAK,IAAIrB,GAAGO,CAAC;AACvB,WAASL,IAAI,GAAGA,IAAImB,GAAG,EAAEnB;AACvB,aAASQ,IAAI,GAAGA,IAAIR,GAAG,EAAEQ,GAAG;AAC1B,YAAMY,IAAOvB,EAAOG,CAAC,EAAEQ,CAAC;AACxB,MAAAX,EAAOG,CAAC,EAAEQ,CAAC,IAAIX,EAAOW,CAAC,EAAER,CAAC,GACnBH,EAAAW,CAAC,EAAER,CAAC,IAAIoB;AAAA,IACjB;AAIF,MAAItB,IAAIO,GAAG;AACT,aAASL,IAAI,GAAGA,IAAIK,GAAG,EAAEL,GAAG;AACnB,MAAAH,EAAAG,CAAC,EAAE,SAASF;AACnB,eAASU,IAAIH,GAAGG,IAAIV,GAAG,EAAEU;AACvB,QAAAX,EAAOG,CAAC,EAAEQ,CAAC,IAAIX,EAAOW,CAAC,EAAER,CAAC;AAAA,IAE9B;AACA,IAAAH,EAAO,SAASQ;AAAA,EAClB;AAGA,MAAIP,IAAIO,GAAG;AACT,IAAAR,EAAO,SAASQ;AAChB,aAASL,IAAIF,GAAGE,IAAIK,GAAG,EAAEL,GAAG;AAC1B,MAAAH,EAAOG,CAAC,IAAI,IAAI,MAAMF,CAAC;AACvB,eAASU,IAAI,GAAGA,IAAIV,GAAG,EAAEU;AACvB,QAAAX,EAAOG,CAAC,EAAEQ,CAAC,IAAIX,EAAOW,CAAC,EAAER,CAAC;AAAA,IAE9B;AACA,aAASA,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AAChB,MAAAH,EAAAG,CAAC,EAAE,SAASF;AAAA,EAEvB;AACF;ACvmBgB,SAAAuB,EACdC,GACAC,GACAC,GACW;AACJ,SAAAvB,EAAOqB,GAASC,GAAMC,CAAM;AACrC;AAWO,SAASC,EACdC,GACe;AACf,SAAOhB,EAAOgB,CAA4B;AAC5C;AAWO,SAASC,EACdD,GACe;AACf,SAAOb,EAAOa,CAA4B;AAC5C;AAmDgB,SAAAE,EACdF,GACAV,GACM;AACN,EAAAD,EAAOW,GAA8BV,CAAgB;AACvD;AA6BO,SAASa,EACdH,GACM;AACN,EAAAT,EAAOS,CAAU;AACnB;AC/IO,SAASb,EACdiB,GACe;AACf,QAAMX,IAAIW,EAAM;AAChB,MAAIX,KAAK;AACA;AAGL,MAAAL,IAAMgB,EAAM,CAAC;AACjB,WAASC,IAAI,GAAGA,IAAIZ,GAAG,EAAEY;AACnB,IAAAjB,IAAMgB,EAAMC,CAAC,MACfjB,IAAMgB,EAAMC,CAAC;AAIV,SAAAjB;AACT;ACxBgB,SAAAkB,EACdnC,GACAoC,GACAC,GACM;AHZD,MAAAvB;AGaL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAG/B,MAAIb,KAAKO;AACP,aAASL,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACvB,MAAAkC,EAAMlC,CAAC,IAAIa,EAAOhB,EAAOG,CAAC,CAAC;AAK/B,MAAIF,KAAKO,GAAG;AACN,QAAA8B,IAAKD,EAAM,CAAC,GACZ3B,IAAMV,EAAO,CAAC;AAClB,aAASW,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACjB,MAAAyB,EAAAzB,CAAC,IAAID,EAAIC,CAAC,MAAM2B,IAAK,IAAI5B,EAAIC,CAAC,IAAI2B;AAE1C,aAASnC,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AAC1B,MAAAmC,IAAKD,EAAMlC,CAAC,GACZO,IAAMV,EAAOG,CAAC;AACd,eAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG,GAAG;AACpB,cAAA4B,IAAK7B,EAAIC,CAAC,MAAM2B,IAAK,IAAI5B,EAAIC,CAAC,IAAI2B;AACpC,QAAAC,IAAKH,EAAMzB,CAAC,MACdyB,EAAMzB,CAAC,IAAI4B;AAAA,MAEf;AAAA,IACF;AAAA,EACF;AACF;AAWO,SAASC,EACdxC,GACAoC,GACAC,GACAI,GACAC,GACQ;AACR,QAAMlC,IAAI4B,EAAM,QACVnC,IAAIoC,EAAM;AAEhB,MAAIM,IAAQ;AACZ,WAASxC,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAmC,IAAK,CAACD,EAAMlC,CAAC,GACbO,IAAMV,EAAOG,CAAC;AACpB,aAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG,GAAG;AACpB,YAAAiC,IAAOR,EAAMzB,CAAC,MAAM2B,IAAK,IAAIF,EAAMzB,CAAC,IAAI2B;AAC9C,UAAIG,EAAO9B,CAAC,MAAM,MAAMD,EAAIC,CAAC,MAAMiC,GAAM;AACvC,QAAAH,EAAO9B,CAAC,IAAIR,GACZuC,EAAOvC,CAAC,IAAIQ,GACV,EAAAgC;AACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEO,SAAAA;AACT;AA0BO,SAASE,EAAM7C,GAAkC;AHxGjD,MAAAc;AG0GL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC/B,MAAIb,IAAIO;AACA,UAAA,IAAI,WAAW,2BAA2B;AAIlD,QAAM4B,IAAQ,IAAI,MAAc5B,CAAC,EAAE,KAAK,CAAC,GACnC6B,IAAQ,IAAI,MAAcpC,CAAC,EAAE,KAAK,CAAC;AACnCkC,EAAAA,EAAAnC,GAAQoC,GAAOC,CAAK;AAG1B,QAAMI,IAAS,IAAI,MAAcjC,CAAC,EAAE,KAAK,EAAE,GACrCkC,IAAS,IAAI,MAAczC,CAAC,EAAE,KAAK,EAAE;AAC3C,MAAI0C,IAAQH,EAAUxC,GAAQoC,GAAOC,GAAOI,GAAQC,CAAM;AAG1D,MAAIC,KAAS1C;AACJ,WAAAyC;AAIH,QAAAI,IAAW,IAAI,MAActC,CAAC,GAC9BuC,IAAW,IAAI,MAAc9C,CAAC,EAAE,KAAK,EAAE,GACvC+C,IAAS,IAAI,MAAcxC,CAAC,GAC5ByC,IAAS,IAAI,MAAczC,CAAC,GAC5B0C,IAAW,IAAI,MAAc1C,CAAC;AAEpC,WAAS2C,IAAQ,GAAGR,IAAQ1C,GAAG,EAAEkD;AAC3B,QAAAT,EAAOS,CAAK,MAAM;AAWtB,WANAL,EAAS,KAAK,EAAE,GAChBC,EAASI,CAAK,IAAIA,GAClBC,EAAYF,CAAQ,GACpBG,EAAUF,GAAOnD,GAAQoC,GAAOC,GAAOW,GAAQC,CAAM,OAGxC;AAEX,cAAM,CAAC9C,GAAGQ,CAAC,IAAI2C,EAAiBJ,GAAUF,GAAQC,CAAM;AAYpD,YATAD,EAAOrC,CAAC,IAAI,KACR4C,EAAAP,EAAOrC,CAAC,GAAGwC,GAAOL,GAAUC,GAAUX,GAAOC,GAAOW,CAAM,GAIlEF,EAASnC,CAAC,IAAIR,GACdqD,EAAMN,GAAUvC,CAAC,GAGb8B,EAAO9B,CAAC,MAAM,IAAI;AACd,UAAA8C,EAAA9C,GAAGmC,GAAUL,GAAQC,CAAM,GAC/B,EAAAC;AACF;AAAA,QACF;AAGM,cAAAe,IAAKjB,EAAO9B,CAAC;AACnB,QAAAoC,EAASW,CAAE,IAAIP,GACfQ,EAAYD,GAAI1D,GAAQoC,GAAOC,GAAOa,GAAUF,GAAQC,CAAM;AAAA,MAChE;AAIK,SAAAP;AACT;AAiBO,SAASe,EACd9C,GACAmC,GACAc,GACAC,GACM;AACH,KAAA;AACK,UAAA1D,IAAI2C,EAASnC,CAAC,GACdmD,IAAKD,EAAM1D,CAAC;AAClB,IAAAyD,EAAMjD,CAAC,IAAIR,GACX0D,EAAM1D,CAAC,IAAIQ,GACPA,IAAAmD;AAAA,EAAA,SACGnD,MAAM;AACjB;AAYO,SAAS4C,EACdtC,GACAkC,GACAL,GACAC,GACAX,GACAC,GACAW,GACM;AACN,QAAMxC,IAAI4B,EAAM,QACVnC,IAAIoC,EAAM;AAEhB,WAASlC,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACnB,IAAA4C,EAAS5C,CAAC,MAAMgD,MACZd,EAAAlC,CAAC,IAAIkC,EAAMlC,CAAC,MAAM,CAACc,IAAM,IAAIoB,EAAMlC,CAAC,IAAIc;AAIlD,WAASN,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,IAAAmC,EAASnC,CAAC,MAAM,KACXqC,EAAArC,CAAC,IAAIqC,EAAOrC,CAAC,MAAMM,IAAM,IAAI+B,EAAOrC,CAAC,IAAIM,IAE1CmB,EAAAzB,CAAC,IAAIyB,EAAMzB,CAAC,MAAMM,IAAM,IAAImB,EAAMzB,CAAC,IAAIM;AAGnD;AAEO,SAASmC,EAAYW,GAAyB;AACnD,QAAMzC,IAAIyC,EAAQ;AAClB,WAAS7B,IAAI,GAAGA,IAAIZ,GAAG,EAAEY;AACvB,IAAA6B,EAAQ7B,CAAC,IAAIA;AAEjB;AAEgB,SAAAsB,EAAMO,GAAmB7B,GAAiB;AACxD,QAAMZ,IAAIyC,EAAQ,QACZC,IAAO9B,IAAI,IAAIZ,IAAIyC,EAAQ7B,IAAI,CAAC,IAAIZ;AACjC,WAAA2C,IAAI/B,GAAG+B,KAAK,KAAKF,EAAQE,CAAC,MAAM/B,GAAG,EAAE+B;AAC5C,IAAAF,EAAQE,CAAC,IAAID;AAEjB;AAYgB,SAAAV,EACdJ,GACAF,GACAC,GACkB;AAClB,QAAMzC,IAAIwC,EAAO;AAEb,MAAAkB,IAAOhB,EAAS,CAAC,GACjBiB,IAAOnB,EAAOkB,CAAI;AACb,WAAAvD,IAAIuD,IAAO,GAAGvD,IAAIH,KAAK0C,EAASvC,CAAC,IAAIH,MAC5CG,IAAIuC,EAASvC,CAAC,GACV,EAAAqC,EAAOrC,CAAC,IAAIwD,MACdA,IAAOnB,EAAOrC,CAAC,GACRuD,IAAAvD,GACHwD,MAAS,MALgC,EAAExD;AAE7C;AASN,SAAO,CAACsC,EAAOiB,CAAI,GAAGA,CAAI;AAC5B;AAEO,SAASb,EACdlD,GACAH,GACAoC,GACAC,GACAW,GACAC,GACM;AACA,QAAAX,IAAK,CAACD,EAAMlC,CAAC,GACbO,IAAMV,EAAOG,CAAC,GACdK,IAAIyC,EAAO;AAEjB,EAAAA,EAAO,KAAK9C,CAAC;AACb,WAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG,GAAG;AACpB,UAAAiC,IAAOR,EAAMzB,CAAC,MAAM2B,IAAK,IAAIF,EAAMzB,CAAC,IAAI2B;AACvC,IAAAU,EAAArC,CAAC,IAAID,EAAIC,CAAC,MAAMiC,IAAO,IAAIlC,EAAIC,CAAC,IAAIiC;AAAA,EAC7C;AACF;AAmCO,SAASe,EACdxD,GACAH,GACAoC,GACAC,GACAa,GACAF,GACAC,GACM;AACA,QAAAX,IAAK,CAACD,EAAMlC,CAAC,GACbO,IAAMV,EAAOG,CAAC,GACdK,IAAIyC,EAAO;AAER,WAAAtC,IAAI,GAAGA,IAAIH,KAAK0C,EAASvC,CAAC,IAAIH,GAAG,EAAEG,GAAG;AAC7C,IAAAA,IAAIuC,EAASvC,CAAC;AACR,UAAAiC,IAAOR,EAAMzB,CAAC,MAAM2B,IAAK,IAAIF,EAAMzB,CAAC,IAAI2B,GACxC8B,IAAQ1D,EAAIC,CAAC,MAAMiC,IAAO,IAAIlC,EAAIC,CAAC,IAAIiC;AACzC,IAAAwB,IAAQpB,EAAOrC,CAAC,MAClBqC,EAAOrC,CAAC,IAAIyD,GACZnB,EAAOtC,CAAC,IAAIR;AAAA,EAEhB;AACF;ACvWgB,SAAAgC,EACdnC,GACAoC,GACAC,GACM;AJXD,MAAAvB;AIYL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAG/B,MAAIb,KAAKO;AACP,aAASL,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACvB,MAAAkC,EAAMlC,CAAC,IAAIa,EAAOhB,EAAOG,CAAC,CAAC;AAK/B,MAAIF,KAAKO,GAAG;AACV,aAASG,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACjB,MAAAyB,EAAAzB,CAAC,IAAIX,EAAO,CAAC,EAAEW,CAAC,IAAI0B,EAAM,CAAC;AAEnC,aAASlC,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,YAAAO,IAAMV,EAAOG,CAAC,GACdmC,IAAKD,EAAMlC,CAAC;AAClB,eAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,QAAID,EAAIC,CAAC,IAAI2B,IAAKF,EAAMzB,CAAC,MACvByB,EAAMzB,CAAC,IAAID,EAAIC,CAAC,IAAI2B;AAAA,IAG1B;AAAA,EACF;AACF;AAWO,SAASE,EACdxC,GACAoC,GACAC,GACAI,GACAC,GACQ;AACR,QAAMlC,IAAI4B,EAAM,QACVnC,IAAIoC,EAAM;AAEhB,MAAIM,IAAQ;AACZ,WAASxC,IAAI,GAAGA,IAAIF,GAAG,EAAEE,GAAG;AACpB,UAAAO,IAAMV,EAAOG,CAAC,GACdmC,IAAKD,EAAMlC,CAAC;AAClB,aAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,UAAA8B,EAAO9B,CAAC,MAAM,MAAMD,EAAIC,CAAC,MAAMyB,EAAMzB,CAAC,IAAI2B,GAAI;AAChD,QAAAG,EAAO9B,CAAC,IAAIR,GACZuC,EAAOvC,CAAC,IAAIQ,GACV,EAAAgC;AACF;AAAA,MACF;AAAA,EAEJ;AAEO,SAAAA;AACT;AA4BO,SAAS0B,EAASrE,GAAkC;AJrGpD,MAAAc;AIuGL,QAAMb,IAAID,EAAO,QACXQ,MAAIM,IAAAd,EAAO,CAAC,MAAR,gBAAAc,EAAW,WAAU;AAC/B,MAAIb,IAAIO;AACA,UAAA,IAAI,WAAW,2BAA2B;AAIlD,QAAM4B,IAAQ,IAAI,MAAc5B,CAAC,EAAE,KAAK,EAAE,GACpC6B,IAAQ,IAAI,MAAcpC,CAAC,EAAE,KAAK,EAAE;AACpC,EAAAkC,EAAAnC,GAAQoC,GAAOC,CAAK;AAG1B,QAAMI,IAAS,IAAI,MAAcjC,CAAC,EAAE,KAAK,EAAE,GACrCkC,IAAS,IAAI,MAAczC,CAAC,EAAE,KAAK,EAAE;AAC3C,MAAI0C,IAAQH,EAAUxC,GAAQoC,GAAOC,GAAOI,GAAQC,CAAM;AAG1D,MAAIC,KAAS1C;AACJ,WAAAyC;AAIH,QAAAI,IAAW,IAAI,MAActC,CAAC,GAC9BuC,IAAW,IAAI,MAAc9C,CAAC,EAAE,KAAK,EAAE,GACvC+C,IAAS,IAAI,MAAcxC,CAAC,GAC5ByC,IAAS,IAAI,MAAczC,CAAC,GAC5B0C,IAAW,IAAI,MAAc1C,CAAC;AAEpC,WAAS2C,IAAQ,GAAGR,IAAQ1C,GAAG,EAAEkD;AAC3B,QAAAT,EAAOS,CAAK,MAAM;AAatB,WARAL,EAAS,KAAK,EAAE,GAChBC,EAASI,CAAK,IAAIA,GAClBC,EAAYF,CAAQ,GAGpBG,EAAUF,GAAOnD,GAAQoC,GAAOC,GAAOW,GAAQC,CAAM,OAGxC;AAEX,cAAM,CAAC9C,GAAGQ,CAAC,IAAI2C,EAAiBJ,GAAUF,GAAQC,CAAM;AAYpD,YATAD,EAAOrC,CAAC,IAAI,MACR4C,EAAAP,EAAOrC,CAAC,GAAGwC,GAAOL,GAAUC,GAAUX,GAAOC,GAAOW,CAAM,GAIlEF,EAASnC,CAAC,IAAIR,GACdqD,EAAMN,GAAUvC,CAAC,GAGb8B,EAAO9B,CAAC,MAAM,IAAI;AACd,UAAA8C,EAAA9C,GAAGmC,GAAUL,GAAQC,CAAM,GAC/B,EAAAC;AACF;AAAA,QACF;AAGM,cAAAe,IAAKjB,EAAO9B,CAAC;AACnB,QAAAoC,EAASW,CAAE,IAAIP,GACfQ,EAAYD,GAAI1D,GAAQoC,GAAOC,GAAOa,GAAUF,GAAQC,CAAM;AAAA,MAChE;AAIK,SAAAP;AACT;AAYO,SAASa,EACdtC,GACAkC,GACAL,GACAC,GACAX,GACAC,GACAW,GACM;AACN,QAAMxC,IAAI4B,EAAM,QACVnC,IAAIoC,EAAM;AAEhB,WAASlC,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACnB,IAAA4C,EAAS5C,CAAC,MAAMgD,MAClBd,EAAMlC,CAAC,KAAKc;AAIhB,WAASN,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACnB,IAAAmC,EAASnC,CAAC,MAAM,KAClBqC,EAAOrC,CAAC,KAAKM,IAEbmB,EAAMzB,CAAC,KAAKM;AAGlB;AAEO,SAASoC,EACdlD,GACAH,GACAoC,GACAC,GACAW,GACAC,GACM;AACN,QAAMzC,IAAIwC,EAAO,QACXtC,IAAMV,EAAOG,CAAC,GACdmC,IAAKD,EAAMlC,CAAC;AAElB,EAAA8C,EAAO,KAAK9C,CAAC;AACb,WAASQ,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,IAAAqC,EAAOrC,CAAC,IAAID,EAAIC,CAAC,IAAIyB,EAAMzB,CAAC,IAAI2B;AAEpC;AAEO,SAASqB,EACdxD,GACAH,GACAoC,GACAC,GACAa,GACAF,GACAC,GACM;AACN,QAAMzC,IAAIwC,EAAO,QACXtC,IAAMV,EAAOG,CAAC,GACdmC,IAAKD,EAAMlC,CAAC;AAET,WAAAQ,IAAI,GAAGA,IAAIH,KAAK0C,EAASvC,CAAC,IAAIH,GAAG,EAAEG,GAAG;AAC7C,IAAAA,IAAIuC,EAASvC,CAAC;AACd,UAAMyD,IAAQ1D,EAAIC,CAAC,IAAIyB,EAAMzB,CAAC,IAAI2B;AAC9B,IAAA8B,IAAQpB,EAAOrC,CAAC,MAClBqC,EAAOrC,CAAC,IAAIyD,GACZnB,EAAOtC,CAAC,IAAIR;AAAA,EAEhB;AACF;ACzPO,SAASmE,EAASC,GAAiC;AACxD,SAAO,OAAOA,KAAU;AAC1B;ACOO,SAASC,EACd3C,GACiB;ANdZ,MAAAf;AMgBL,QAAMb,IAAI4B,EAAW,QACfrB,MAAIM,IAAAe,EAAW,CAAC,MAAZ,gBAAAf,EAAe,WAAU;AAGnC,MAAIN,KAAK;AACP,WAAO;AAIT,EAAIP,IAAIO,MACNqB,IAAa9B,EAAK8B,CAAU,GAC5BR,EAAUQ,CAAU;AAItB,QAAM4C,IAAMH,EAASzC,EAAW,CAAC,EAAE,CAAC,CAAC,IACjCwC,EAASxC,CAA4B,IACrCgB,EAAMhB,CAA4B,GAGhC6C,IAAID,EAAI,QACRE,IAAyB,IAAI,MAAMD,CAAC;AAC1C,WAASvE,IAAI,GAAGA,IAAIuE,GAAG,EAAEvE;AACvB,IAAAwE,EAAMxE,CAAC,IAAI,CAACA,GAAGsE,EAAItE,CAAC,CAAC;AAIvB,SAAIF,IAAIO,KACNI,EAAM+D,CAAK,GAINA;AACT;"}